{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/typing-box.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { Save, BarChart3, Timer, Target, FileText, Type } from 'lucide-react';\n\ninterface TypingBoxProps {\n  onComplete: (record: {\n    content: string;\n    keyCount: number;\n    typingTime: number;\n    timestamp: string;\n  }) => void;\n}\n\nconst IDLE_TIMEOUT = 3000; // 3초\n\nexport function TypingBox({ onComplete }: TypingBoxProps) {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const [typingTime, setTypingTime] = useState<number>(0);\n  const [keyCount, setKeyCount] = useState<number>(0);\n  const [stats, setStats] = useState({\n    pages: 0,\n    words: 0,\n    charCount: 0,\n    charCountNoSpace: 0,\n    accuracy: 100,\n  });\n  \n  const idleTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const typingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const compositionHandledRef = useRef<boolean>(false);\n  const totalKeystrokesRef = useRef<number>(0);\n\n  // 구글 문서 방식으로 통계 업데이트\n  const updateStats = useCallback(() => {\n    if (!editorRef.current) return;\n    \n    const content = editorRef.current.textContent ?? '';\n    \n    // 구글 문서 방식의 단어 수(공백 기준 어절 분리)\n    const words = content.trim().length > 0\n      ? content.trim().split(/\\s+/).length\n      : 0;\n    \n    // 글자 수(공백 포함) - 모든 글자 1개씩 카운트\n    const charCount = content.length;\n    \n    // 글자 수(공백 제외)\n    const charCountNoSpace = content.replace(/\\s/g, '').length;\n    \n    // 페이지 수 계산(600자 기준)\n    const pages = Math.max(1, Math.ceil(charCount / 600));\n    \n    // 정확도 계산\n    const accuracy = totalKeystrokesRef.current > 0 \n      ? Math.round((keyCount / totalKeystrokesRef.current) * 100)\n      : 100;\n\n    setStats({\n      pages,\n      words,\n      charCount,\n      charCountNoSpace,\n      accuracy,\n    });\n  }, [keyCount]);\n\n  const stopTyping = useCallback(() => {\n    if (typingTimerRef.current) {\n      clearInterval(typingTimerRef.current);\n      typingTimerRef.current = null;\n    }\n  }, []);\n\n  const startTyping = useCallback(() => {\n    if (typingTimerRef.current) clearInterval(typingTimerRef.current);\n    typingTimerRef.current = setInterval(() => {\n      setTypingTime(prev => prev + 1);\n    }, 1000);\n\n    if (idleTimerRef.current) clearTimeout(idleTimerRef.current);\n    idleTimerRef.current = setTimeout(stopTyping, IDLE_TIMEOUT);\n  }, [stopTyping]);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    // e.key가 한 글자이거나 스페이스/엔터일 때만 카운트\n    if (e.key.length === 1 || e.key === ' ' || e.key === 'Enter') {\n      // 한글 완성형은 2타, 나머지는 1타로 계산\n      const isKorean = /[가-힣]/.test(e.key);\n      const keystrokeCount = isKorean ? 2 : 1;\n      \n      setKeyCount(prev => prev + keystrokeCount);\n      totalKeystrokesRef.current += keystrokeCount;\n      \n      startTyping();\n      updateStats();\n    }\n  }, [startTyping, updateStats]);\n\n  const handleCompositionEnd = useCallback((e: React.CompositionEvent<HTMLDivElement>) => {\n    compositionHandledRef.current = true;\n    let typeCount = 0;\n    \n    // 한글 완성형은 2타, 자음/모음은 1타, 다른 문자도 1타로 계산\n    for (const char of e.data) {\n      if (/[가-힣]/.test(char)) {\n        typeCount += 2; // 한글 완성형은 2타\n      } else if (/[ㄱ-ㅎ|ㅏ-ㅣ]/.test(char)) {\n        typeCount += 1; // 한글 자음/모음은 1타\n      } else {\n        typeCount += 1; // 그 외 문자는 1타\n      }\n    }\n    \n    setKeyCount(prev => prev + typeCount);\n    totalKeystrokesRef.current += typeCount;\n    \n    startTyping();\n    updateStats();\n  }, [startTyping, updateStats]);\n\n  const handleInput = useCallback((e: React.FormEvent<HTMLDivElement> & { data?: string }) => {\n    if (compositionHandledRef.current) {\n      compositionHandledRef.current = false;\n      return;\n    }\n    \n    if (e.data) {\n      // 각 문자별로 타수 계산\n      let inputTypeCount = 0;\n      for (const char of e.data) {\n        if (/[가-힣]/.test(char)) {\n          inputTypeCount += 2; // 한글 완성형은 2타\n        } else {\n          inputTypeCount += 1; // 그 외 문자는 1타\n        }\n      }\n      \n      setKeyCount(prev => prev + inputTypeCount);\n      totalKeystrokesRef.current += inputTypeCount;\n      \n      startTyping();\n      updateStats();\n    }\n  }, [startTyping, updateStats]);\n\n  const handleSave = async () => {\n    if (!editorRef.current) return;\n    \n    const content = editorRef.current.textContent ?? '';\n    const logData = {\n      content,\n      keyCount,\n      typingTime,\n      timestamp: new Date().toISOString(),\n    };\n    \n    onComplete(logData);\n    \n    // 저장 후 초기화\n    if (editorRef.current) editorRef.current.textContent = '';\n    setKeyCount(0);\n    setTypingTime(0);\n    totalKeystrokesRef.current = 0;\n    updateStats();\n  };\n\n  useEffect(() => {\n    return () => {\n      if (typingTimerRef.current) clearInterval(typingTimerRef.current);\n      if (idleTimerRef.current) clearTimeout(idleTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"w-full h-full flex flex-col bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n      {/* Status Bar */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 rounded-t-lg\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4 text-blue-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              글자: {stats.charCount}({stats.charCountNoSpace})\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Type className=\"w-4 h-4 text-green-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              단어: {stats.words}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4 text-purple-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              페이지: {stats.pages}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-4 h-4 text-orange-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              타자: {keyCount}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Timer className=\"w-4 h-4 text-red-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              시간: {typingTime}초\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4 text-indigo-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              타수: {typingTime > 0 ? Math.round((keyCount / typingTime) * 60) : 0}타/분\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-4 h-4 text-teal-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              정확도: {stats.accuracy}%\n            </span>\n          </div>\n        </div>\n        \n        <button\n          onClick={handleSave}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-200 shadow-sm\"\n        >\n          <Save className=\"w-4 h-4\" />\n          저장\n        </button>\n      </div>\n      \n      {/* Editor */}        <div\n          ref={editorRef}\n          className=\"flex-1 p-6 outline-none resize-none bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 leading-relaxed text-base overflow-auto\"\n          contentEditable\n          onKeyDown={handleKeyDown}\n          onCompositionEnd={handleCompositionEnd}\n          onInput={handleInput}\n          data-placeholder=\"여기에 타이핑을 시작하세요...\"\n          style={{\n            minHeight: '300px',\n            fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n            lineHeight: '1.6',\n        }}\n      />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/stats-chart.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useMemo } from 'react';\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, ResponsiveContainer, LineChart, Line \n} from 'recharts';\nimport { BarChart3, Clock, FileText, Calendar, Activity } from 'lucide-react';\n\ninterface Log {\n  timestamp: string;\n  keyCount: number;\n  typingTime: number;\n  totalChars?: number;\n}\n\ninterface StatsChartProps {\n  logs: Log[];\n}\n\nexport function StatsChart({ logs }: StatsChartProps) {\n  const [chartType, setChartType] = useState<'daily' | 'hourly'>('daily');\n  const [dataType, setDataType] = useState<'keyCount' | 'typingTime' | 'totalChars'>('keyCount');\n  const [visualType, setVisualType] = useState<'bar' | 'line'>('bar');\n\n  const chartData = useMemo(() => {\n    if (!logs || logs.length === 0) return [];\n\n    if (chartType === 'daily') {\n      // 일별 데이터 집계\n      const dailyData: Record<string, { \n        date: string; \n        keyCount: number; \n        typingTime: number; \n        totalChars: number; \n        sessions: number;\n        averageWPM: number;\n      }> = {};\n      \n      logs.forEach(log => {\n        const date = new Date(log.timestamp).toLocaleDateString();\n        if (!dailyData[date]) {\n          dailyData[date] = {\n            date,\n            keyCount: 0,\n            typingTime: 0,\n            totalChars: 0,\n            sessions: 0,\n            averageWPM: 0\n          };\n        }\n        dailyData[date].keyCount += log.keyCount || 0;\n        dailyData[date].typingTime += log.typingTime || 0;\n        dailyData[date].totalChars += log.totalChars || 0;\n        dailyData[date].sessions += 1;\n      });\n      \n      // Calculate average WPM for each day\n      Object.values(dailyData).forEach(day => {\n        day.averageWPM = day.typingTime > 0 ? Math.round((day.keyCount / day.typingTime) * 60) : 0;\n      });\n      \n      return Object.values(dailyData).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    } else {\n      // 시간별 데이터 집계\n      const hourlyData: Record<string, { \n        hour: string; \n        keyCount: number; \n        typingTime: number; \n        totalChars: number; \n        sessions: number;\n        averageWPM: number;\n      }> = {};\n      \n      logs.forEach(log => {\n        const date = new Date(log.timestamp);\n        const hour = date.getHours();\n        const hourKey = `${hour}시`;\n        if (!hourlyData[hourKey]) {\n          hourlyData[hourKey] = {\n            hour: hourKey,\n            keyCount: 0,\n            typingTime: 0,\n            totalChars: 0,\n            sessions: 0,\n            averageWPM: 0\n          };\n        }\n        hourlyData[hourKey].keyCount += log.keyCount || 0;\n        hourlyData[hourKey].typingTime += log.typingTime || 0;\n        hourlyData[hourKey].totalChars += log.totalChars || 0;\n        hourlyData[hourKey].sessions += 1;\n      });\n      \n      // Calculate average WPM for each hour\n      Object.values(hourlyData).forEach(hour => {\n        hour.averageWPM = hour.typingTime > 0 ? Math.round((hour.keyCount / hour.typingTime) * 60) : 0;\n      });\n      \n      return Object.values(hourlyData).sort((a, b) => parseInt(a.hour) - parseInt(b.hour));\n    }\n  }, [logs, chartType]);\n\n  const getDataTypeLabel = (type: string) => {\n    switch (type) {\n      case 'keyCount': return '타자수';\n      case 'typingTime': return '타이핑 시간(초)';\n      case 'totalChars': return '총 문자수';\n      default: return '타자수';\n    }\n  };\n\n  const getDataTypeColor = (type: string) => {\n    switch (type) {\n      case 'keyCount': return '#3b82f6';\n      case 'typingTime': return '#10b981';\n      case 'totalChars': return '#f59e0b';\n      default: return '#3b82f6';\n    }\n  };\n\n  return (\n    <div className=\"w-full bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <BarChart3 className=\"w-6 h-6 text-blue-500\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">타이핑 통계 차트</h2>\n        </div>\n        \n        {/* Chart Controls */}\n        <div className=\"flex flex-wrap gap-4\">\n          {/* Period Selection */}\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">기간:</span>\n            <div className=\"flex rounded-md overflow-hidden border border-gray-300 dark:border-gray-600\">\n              <button \n                className={`px-3 py-1 text-sm transition-colors ${\n                  chartType === 'daily' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setChartType('daily')}\n              >\n                일별\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  chartType === 'hourly' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setChartType('hourly')}\n              >\n                시간별\n              </button>\n            </div>\n          </div>\n          \n          {/* Chart Type Selection */}\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">차트:</span>\n            <div className=\"flex rounded-md overflow-hidden border border-gray-300 dark:border-gray-600\">\n              <button \n                className={`px-3 py-1 text-sm transition-colors ${\n                  visualType === 'bar' \n                    ? 'bg-green-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setVisualType('bar')}\n              >\n                막대\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  visualType === 'line' \n                    ? 'bg-green-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setVisualType('line')}\n              >\n                선형\n              </button>\n            </div>\n          </div>\n          \n          {/* Data Type Selection */}\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">데이터:</span>\n            <div className=\"flex rounded-md overflow-hidden border border-gray-300 dark:border-gray-600\">\n              <button \n                className={`px-3 py-1 text-sm transition-colors ${\n                  dataType === 'keyCount' \n                    ? 'bg-purple-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setDataType('keyCount')}\n              >\n                타자수\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  dataType === 'typingTime' \n                    ? 'bg-purple-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setDataType('typingTime')}\n              >\n                시간\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  dataType === 'totalChars' \n                    ? 'bg-purple-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setDataType('totalChars')}\n              >\n                문자수\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart */}\n      <div className=\"p-6\">\n        <div className=\"h-96\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            {visualType === 'bar' ? (\n              <BarChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 30 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey={chartType === 'daily' ? 'date' : 'hour'}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={70}\n                  className=\"text-xs fill-gray-600 dark:fill-gray-400\"\n                />\n                <YAxis className=\"text-xs fill-gray-600 dark:fill-gray-400\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Legend />\n                <Bar \n                  dataKey={dataType}\n                  name={getDataTypeLabel(dataType)}\n                  fill={getDataTypeColor(dataType)}\n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            ) : (\n              <LineChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 30 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey={chartType === 'daily' ? 'date' : 'hour'}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={70}\n                  className=\"text-xs fill-gray-600 dark:fill-gray-400\"\n                />\n                <YAxis className=\"text-xs fill-gray-600 dark:fill-gray-400\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Legend />\n                <Line \n                  type=\"monotone\"\n                  dataKey={dataType}\n                  name={getDataTypeLabel(dataType)}\n                  stroke={getDataTypeColor(dataType)}\n                  strokeWidth={2}\n                  dot={{ fill: getDataTypeColor(dataType), strokeWidth: 2, r: 4 }}\n                />\n              </LineChart>\n            )}\n          </ResponsiveContainer>\n        </div>\n      </div>\n      \n      {/* Summary Statistics */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">요약 통계</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <BarChart3 className=\"w-5 h-5 text-blue-500\" />\n              <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">총 타자수</span>\n            </div>\n            <span className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n              {logs.reduce((sum, log) => sum + (log.keyCount || 0), 0).toLocaleString()}\n            </span>\n          </div>\n          \n          <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Clock className=\"w-5 h-5 text-green-500\" />\n              <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">총 시간</span>\n            </div>\n            <span className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n              {formatTime(logs.reduce((sum, log) => sum + (log.typingTime || 0), 0))}\n            </span>\n          </div>\n          \n          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <FileText className=\"w-5 h-5 text-yellow-500\" />\n              <span className=\"text-sm font-medium text-yellow-700 dark:text-yellow-300\">총 문자수</span>\n            </div>\n            <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\n              {logs.reduce((sum, log) => sum + (log.totalChars || 0), 0).toLocaleString()}\n            </span>\n          </div>\n          \n          <div className=\"bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Activity className=\"w-5 h-5 text-purple-500\" />\n              <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">기록 수</span>\n            </div>\n            <span className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n              {logs.length.toLocaleString()}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// 시간 형식화 함수\nfunction formatTime(seconds: number): string {\n  if (seconds < 60) return `${seconds}초`;\n  \n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  if (minutes < 60) {\n    return `${minutes}분 ${remainingSeconds}초`;\n  }\n  \n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  \n  return `${hours}시간 ${remainingMinutes}분 ${remainingSeconds}초`;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/typing-analyzer.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\ninterface TypingData {\n  keyCount: number;\n  typingTime: number;\n  accuracy?: number;\n}\n\ninterface TypingAnalysisResult {\n  wpm: number;\n  accuracy: number;\n  performanceIndex: number;\n  consistencyScore: number;\n  fatigueAnalysis: {\n    score: number;\n    timeFactor: number;\n    intensityFactor: number;\n    recommendation: string;\n  };\n}\n\ninterface TypingAnalyzerProps {\n  stats?: TypingData;\n  isTracking?: boolean;\n  className?: string;\n}\n\n// JavaScript로 타이핑 통계 분석 (폴백)\nfunction analyzeTypingWithJS(data: TypingData): TypingAnalysisResult {\n  const { keyCount, typingTime, accuracy = 100 } = data;\n  \n  // WPM 계산 (1단어 = 5타)\n  const minutes = typingTime / 60000;\n  const wpm = minutes > 0 ? (keyCount / 5) / minutes : 0;\n  \n  // 일관성 점수 (간단한 추정)\n  const consistency = Math.min(100, 65 + (Math.min(keyCount, 500) / 20));\n  \n  // 피로도 계산\n  const fatigue = {\n    score: Math.min(100, (minutes * 10) + (wpm / 10)),\n    timeFactor: minutes,\n    intensityFactor: wpm / 100,\n    recommendation: minutes > 30 \n      ? '휴식이 필요합니다' \n      : minutes > 15 \n        ? '짧은 휴식을 고려하세요' \n        : '좋은 상태입니다'\n  };\n  \n  return {\n    wpm: Math.max(0, wpm),\n    accuracy: Math.min(100, Math.max(0, accuracy)),\n    performanceIndex: Math.max(0, wpm * accuracy / 100),\n    consistencyScore: consistency,\n    fatigueAnalysis: fatigue\n  };\n}\n\nexport function TypingAnalyzer({ stats, isTracking, className }: TypingAnalyzerProps) {\n  const defaultStats = {\n    keyCount: 0,\n    typingTime: 0,\n    accuracy: 100\n  };\n\n  const safeStats = stats || defaultStats;\n  const [result, setResult] = useState<TypingAnalysisResult | null>(null);\n  const [useGpuAcceleration, setUseGpuAcceleration] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [gpuAvailable, setGpuAvailable] = useState<boolean>(false);\n\n  // GPU 상태 확인\n  const checkGpuStatus = useCallback(async () => {\n    try {\n      setGpuAvailable(false); // GPU는 현재 사용 불가로 설정\n    } catch (err) {\n      console.warn('GPU 상태 확인 실패:', err);\n      setGpuAvailable(false);\n    }\n  }, []);\n\n  // GPU로 타이핑 분석 수행\n  const computeWithGpu = useCallback(async (data: TypingData): Promise<TypingAnalysisResult | null> => {\n    try {\n      // GPU 기능은 현재 비활성화\n      return null;\n    } catch (err) {\n      console.error('GPU 계산 실패:', err);\n    }\n    return null;\n  }, []);\n\n  // 타이핑 통계 분석 수행\n  const analyzeTyping = useCallback(async () => {\n    if (!safeStats.keyCount || !safeStats.typingTime) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (useGpuAcceleration && gpuAvailable) {\n        // GPU 가속 분석\n        const gpuResult = await computeWithGpu(safeStats);\n        \n        if (gpuResult) {\n          setResult(gpuResult);\n        } else {\n          // GPU 실패 시 JavaScript 폴백\n          const jsResult = analyzeTypingWithJS(safeStats);\n          setResult(jsResult);\n        }\n      } else {\n        // JavaScript로 분석 (폴백)\n        const jsResult = analyzeTypingWithJS(safeStats);\n        setResult(jsResult);\n      }\n    } catch (err) {\n      console.error('타이핑 분석 오류:', err);\n      setError('분석 중 오류가 발생했습니다.');\n      \n      // 오류 시 JavaScript 폴백 사용\n      const jsResult = analyzeTypingWithJS(safeStats);\n      setResult(jsResult);\n    } finally {\n      setLoading(false);\n    }\n  }, [safeStats, useGpuAcceleration, gpuAvailable, computeWithGpu]);\n\n  // GPU 가속 활성화/비활성화 처리\n  const handleToggleGpu = useCallback(async () => {\n    const newState = !useGpuAcceleration;\n    setUseGpuAcceleration(newState);\n    \n    if (newState && gpuAvailable) {\n      try {\n        // GPU 기능은 현재 비활성화\n        setUseGpuAcceleration(false);\n      } catch (err) {\n        console.error('GPU 활성화 실패:', err);\n        setUseGpuAcceleration(false);\n      }\n    }\n  }, [useGpuAcceleration, gpuAvailable]);\n\n  // 컴포넌트 마운트 시 GPU 상태 확인\n  useEffect(() => {\n    checkGpuStatus();\n  }, [checkGpuStatus]);\n\n  // 데이터 변경 시 재분석\n  useEffect(() => {\n    if (safeStats.keyCount > 0 && safeStats.typingTime > 0) {\n      analyzeTyping();\n    }\n  }, [safeStats, analyzeTyping]);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border p-6 ${className || ''}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">타이핑 분석</h2>\n        {gpuAvailable && (\n          <div className=\"flex items-center space-x-2\">\n            <label className=\"flex items-center space-x-2 text-sm\">\n              <input\n                type=\"checkbox\"\n                checked={useGpuAcceleration}\n                onChange={handleToggleGpu}\n                disabled={loading}\n                className=\"rounded border-gray-300\"\n              />\n              <span>GPU 가속</span>\n            </label>\n          </div>\n        )}\n      </div>\n\n      {loading && (\n        <div className=\"text-center py-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\n          <p className=\"text-sm text-gray-600 mt-2\">분석 중...</p>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-3 mb-4\">\n          <p className=\"text-red-700 text-sm\">{error}</p>\n        </div>\n      )}\n      \n      {result && !loading && (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-blue-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">속도</div>\n              <div className=\"text-2xl font-bold text-blue-600\">{Math.round(result.wpm)} WPM</div>\n            </div>\n            \n            <div className=\"bg-green-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">정확도</div>\n              <div className=\"text-2xl font-bold text-green-600\">{result.accuracy.toFixed(1)}%</div>\n            </div>\n            \n            <div className=\"bg-purple-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">성능 지수</div>\n              <div className=\"text-2xl font-bold text-purple-600\">{result.performanceIndex.toFixed(1)}</div>\n            </div>\n            \n            <div className=\"bg-orange-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">일관성</div>\n              <div className=\"text-2xl font-bold text-orange-600\">{result.consistencyScore.toFixed(1)}</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-800 mb-2\">피로도 분석</h3>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n              <div \n                className={`h-2 rounded-full ${\n                  result.fatigueAnalysis.score < 30 ? 'bg-green-500' :\n                  result.fatigueAnalysis.score < 70 ? 'bg-yellow-500' : 'bg-red-500'\n                }`}\n                style={{ width: `${Math.min(100, result.fatigueAnalysis.score)}%` }}\n              />\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              {result.fatigueAnalysis.recommendation}\n            </p>\n          </div>\n        </div>\n      )}\n      \n      {!result && !loading && !error && (\n        <div className=\"text-center py-8 text-gray-500\">\n          <p>타이핑을 시작하면 분석 결과가 표시됩니다.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1626, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/restart.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState } from 'react';\nimport { RefreshCw, Power, AlertTriangle } from 'lucide-react';\n\ninterface RestartProps {\n  onRestart?: () => void;\n  onClose?: () => void;\n  reason?: string;\n  isVisible?: boolean;\n  title?: string;\n  message?: string;\n}\n\nfunction Restart({ \n  onRestart, \n  onClose, \n  reason = \"설정을 적용하려면\", \n  isVisible = false,\n  title = \"애플리케이션 재시작 필요\",\n  message\n}: RestartProps) {\n  const [isRestarting, setIsRestarting] = useState(false);\n\n  const handleRestart = async () => {\n    setIsRestarting(true);\n    \n    try {\n      // Electron API를 통한 재시작\n      if (window.electronAPI) {\n        // IPC를 통한 재시작 요청\n        const result = await window.electronAPI.invoke('restartApp', reason);\n        \n        if (result.success) {\n          console.log('🔄 애플리케이션 재시작 중...');\n          onRestart?.();\n        } else {\n          console.error('❌ 재시작 실패:', result.message);\n          setIsRestarting(false);\n        }\n      } else {\n        // 웹 환경에서는 페이지 새로고침\n        window.location.reload();\n      }\n    } catch (error) {\n      console.error('❌ 재시작 처리 중 오류:', error);\n      setIsRestarting(false);\n    }\n  };\n\n  const handleClose = () => {\n    onClose?.();\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-md w-full mx-4\">\n        <div className=\"flex items-start space-x-4\">\n          <div className=\"flex-shrink-0\">\n            <AlertTriangle className=\"h-8 w-8 text-yellow-500\" />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n              {title}\n            </h3>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n              {message || `${reason} 애플리케이션을 다시 시작해야 합니다.`}\n            </p>\n            \n            {reason && (\n              <div className=\"bg-yellow-50 dark:bg-yellow-900 border border-yellow-200 dark:border-yellow-700 rounded-md p-3 mb-4\">\n                <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                  <strong>변경 사항:</strong> {reason}\n                </p>\n              </div>\n            )}\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleRestart}\n                disabled={isRestarting}\n                className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-white font-medium transition-colors ${\n                  isRestarting \n                    ? 'bg-gray-400 cursor-not-allowed' \n                    : 'bg-blue-600 hover:bg-blue-700'\n                }`}\n              >\n                {isRestarting ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    <span>재시작 중...</span>\n                  </>\n                ) : (\n                  <>\n                    <Power className=\"h-4 w-4\" />\n                    <span>지금 재시작</span>\n                  </>\n                )}\n              </button>\n              \n              <button\n                onClick={handleClose}\n                disabled={isRestarting}\n                className=\"px-4 py-2 text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-white border border-gray-300 dark:border-gray-600 rounded-lg transition-colors\"\n              >\n                나중에\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Restart;\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;;;AAHA;;;AAcA,SAAS,QAAQ,EACf,SAAS,EACT,OAAO,EACP,SAAS,WAAW,EACpB,YAAY,KAAK,EACjB,QAAQ,eAAe,EACvB,OAAO,EACM;;IACb,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEjD,MAAM,gBAAgB;QACpB,gBAAgB;QAEhB,IAAI;YACF,uBAAuB;YACvB,IAAI,OAAO,WAAW,EAAE;gBACtB,iBAAiB;gBACjB,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,MAAM,CAAC,cAAc;gBAE7D,IAAI,OAAO,OAAO,EAAE;oBAClB,QAAQ,GAAG,CAAC;oBACZ;gBACF,OAAO;oBACL,QAAQ,KAAK,CAAC,aAAa,OAAO,OAAO;oBACzC,gBAAgB;gBAClB;YACF,OAAO;gBACL,mBAAmB;gBACnB,OAAO,QAAQ,CAAC,MAAM;YACxB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kBAAkB;YAChC,gBAAgB;QAClB;IACF;IAEA,MAAM,cAAc;QAClB;IACF;IAEA,IAAI,CAAC,WAAW;QACd,OAAO;IACT;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC,2NAAA,CAAA,gBAAa;4BAAC,WAAU;;;;;;;;;;;kCAE3B,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CACX;;;;;;0CAEH,6LAAC;gCAAE,WAAU;0CACV,WAAW,GAAG,OAAO,qBAAqB,CAAC;;;;;;4BAG7C,wBACC,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAE,WAAU;;sDACX,6LAAC;sDAAO;;;;;;wCAAe;wCAAE;;;;;;;;;;;;0CAK/B,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCACC,SAAS;wCACT,UAAU;wCACV,WAAW,CAAC,0FAA0F,EACpG,eACI,mCACA,iCACJ;kDAED,6BACC;;8DACE,6LAAC,mNAAA,CAAA,YAAS;oDAAC,WAAU;;;;;;8DACrB,6LAAC;8DAAK;;;;;;;yEAGR;;8DACE,6LAAC,uMAAA,CAAA,QAAK;oDAAC,WAAU;;;;;;8DACjB,6LAAC;8DAAK;;;;;;;;;;;;;kDAKZ,6LAAC;wCACC,SAAS;wCACT,UAAU;wCACV,WAAU;kDACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASf;GAvGS;KAAA;uCAyGM","debugId":null}},
    {"offset": {"line": 1836, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/memory-monitor.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { MemoryStick, Cpu, HardDrive, Zap, RefreshCw, AlertTriangle } from 'lucide-react'\n\ninterface MemoryInfo {\n  total: number\n  used: number\n  free: number\n  percentage: number\n}\n\ninterface MemoryData {\n  main: MemoryInfo\n  renderer: MemoryInfo\n  gpu?: MemoryInfo\n  system: MemoryInfo\n  application?: MemoryInfo // 애플리케이션 총 사용량 추가\n  timestamp: number\n}\n\ninterface MemoryMonitorProps {\n  className?: string\n  autoRefresh?: boolean\n  refreshInterval?: number\n}\n\nexport const MemoryMonitor: React.FC<MemoryMonitorProps> = ({ \n  className = '',\n  autoRefresh = true,\n  refreshInterval = 2000\n}) => {\n  const [memoryData, setMemoryData] = useState<MemoryData | null>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [history, setHistory] = useState<MemoryData[]>([])\n  const [isGCRunning, setIsGCRunning] = useState(false)\n\n  // 메모리 정보 가져오기\n  const fetchMemoryInfo = useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setError(null)\n      \n      if (typeof window !== 'undefined' && window.electronAPI) {\n        const response = await window.electronAPI.memory.getInfo()\n        \n        if (response.success && response.data) {\n          const newData: MemoryData = {\n            ...response.data,\n            timestamp: Date.now()\n          }\n          \n          setMemoryData(newData)\n          setHistory(prev => {\n            const updated = [...prev, newData]\n            // 최근 60개 데이터만 유지 (2분간 데이터)\n            return updated.slice(-60)\n          })\n        } else {\n          setError(response.error || '메모리 정보를 가져올 수 없습니다')\n        }\n      }\n    } catch (err) {\n      console.error('메모리 정보 가져오기 실패:', err)\n      setError(err instanceof Error ? err.message : '알 수 없는 오류')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  // 가비지 컬렉션 실행\n  const runGarbageCollection = useCallback(async () => {\n    try {\n      setIsGCRunning(true)\n      \n      if (typeof window !== 'undefined' && window.electronAPI) {\n        const response = await window.electronAPI.memory.cleanup()\n        \n        if (response.success) {\n          // GC 후 메모리 정보 새로고침\n          setTimeout(fetchMemoryInfo, 1000)\n        } else {\n          setError(response.error || 'GC 실행 실패')\n        }\n      }\n    } catch (err) {\n      console.error('GC 실행 실패:', err)\n      setError(err instanceof Error ? err.message : 'GC 실행 중 오류')\n    } finally {\n      setIsGCRunning(false)\n    }\n  }, [fetchMemoryInfo])\n\n  // 메모리 최적화\n  const optimizeMemory = useCallback(async () => {\n    try {\n      if (typeof window !== 'undefined' && window.electronAPI) {\n        const response = await window.electronAPI.memory.optimize()\n        \n        if (response.success) {\n          setTimeout(fetchMemoryInfo, 1000)\n        } else {\n          setError(response.error || '메모리 최적화 실패')\n        }\n      }\n    } catch (err) {\n      console.error('메모리 최적화 실패:', err)\n      setError(err instanceof Error ? err.message : '메모리 최적화 중 오류')\n    }\n  }, [fetchMemoryInfo])\n\n  // 자동 새로고침 설정\n  useEffect(() => {\n    fetchMemoryInfo() // 초기 로드\n    \n    if (autoRefresh) {\n      const interval = setInterval(fetchMemoryInfo, refreshInterval)\n      return () => clearInterval(interval)\n    }\n  }, [fetchMemoryInfo, autoRefresh, refreshInterval])\n\n  // 메모리 사용량에 따른 색상 결정\n  const getUsageColor = (percentage: number) => {\n    if (percentage >= 85) return 'text-red-500'\n    if (percentage >= 70) return 'text-yellow-500'\n    return 'text-green-500'\n  }\n\n  const getProgressBarColor = (percentage: number) => {\n    if (percentage >= 85) return 'bg-red-500'\n    if (percentage >= 70) return 'bg-yellow-500'\n    return 'bg-green-500'\n  }\n\n  // 메모리 크기 포맷팅 (이미 MB 단위로 입력받음)\n  const formatMemorySize = (megabytes: number) => {\n    if (megabytes >= 1024) {\n      return `${(megabytes / 1024).toFixed(1)} GB`\n    }\n    return `${megabytes.toFixed(1)} MB`\n  }\n\n  // 메모리 정보 카드 컴포넌트\n  const MemoryCard: React.FC<{\n    title: string\n    icon: React.ReactNode\n    info: MemoryInfo\n  }> = ({ title, icon, info }) => (\n    <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700\">\n      <div className=\"flex items-center gap-2 mb-3\">\n        {icon}\n        <h4 className=\"font-medium text-gray-900 dark:text-white\">{title}</h4>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600 dark:text-gray-400\">사용됨</span>\n          <span className={`font-medium ${getUsageColor(info.percentage)}`}>\n            {formatMemorySize(info.used)} ({info.percentage.toFixed(1)}%)\n          </span>\n        </div>\n        \n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n          <div \n            className={`h-2 rounded-full transition-all duration-300 ${getProgressBarColor(info.percentage)}`}\n            style={{ width: `${Math.min(info.percentage, 100)}%` }}\n          />\n        </div>\n        \n        <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n          <span>여유: {formatMemorySize(info.free)}</span>\n          <span>전체: {formatMemorySize(info.total)}</span>\n        </div>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className={`bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 p-6 ${className}`}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center gap-2\">\n          <MemoryStick className=\"w-5 h-5 text-blue-500\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">메모리 모니터</h3>\n          {isLoading && (\n            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent\"></div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-3\">\n          <button\n            onClick={fetchMemoryInfo}\n            disabled={isLoading}\n            className={`\n              relative inline-flex items-center justify-center\n              w-10 h-6 rounded-full transition-all duration-300 cursor-pointer\n              ${isLoading \n                ? 'bg-blue-500 opacity-60 cursor-not-allowed' \n                : 'bg-gray-300 dark:bg-gray-600 hover:bg-blue-400 dark:hover:bg-blue-500'\n              }\n              focus:outline-none focus:ring-0\n            `}\n            title=\"새로고침\"\n            style={{ outline: 'none', boxShadow: 'none' }}\n          >\n            <RefreshCw className={`w-3 h-3 text-white transition-transform duration-300 ${isLoading ? 'animate-spin' : ''}`} />\n          </button>\n          \n          <button\n            onClick={runGarbageCollection}\n            disabled={isGCRunning}\n            className={`\n              relative inline-flex items-center justify-center\n              px-3 py-1.5 rounded-full text-xs font-medium transition-all duration-300 cursor-pointer\n              ${isGCRunning \n                ? 'bg-blue-500 text-white opacity-60 cursor-not-allowed' \n                : 'bg-gray-300 dark:bg-gray-600 text-gray-700 dark:text-gray-200 hover:bg-blue-500 hover:text-white dark:hover:bg-blue-500'\n              }\n              focus:outline-none focus:ring-0\n            `}\n            title=\"가비지 컬렉션 실행\"\n            style={{ outline: 'none', boxShadow: 'none' }}\n          >\n            {isGCRunning ? '실행 중...' : 'GC'}\n          </button>\n          \n          <button\n            onClick={optimizeMemory}\n            disabled={isLoading}\n            className={`\n              relative inline-flex items-center justify-center\n              w-10 h-6 rounded-full transition-all duration-300 cursor-pointer\n              ${isLoading \n                ? 'bg-green-500 opacity-60 cursor-not-allowed' \n                : 'bg-gray-300 dark:bg-gray-600 hover:bg-green-500 dark:hover:bg-green-500'\n              }\n              focus:outline-none focus:ring-0\n            `}\n            title=\"메모리 최적화\"\n            style={{ outline: 'none', boxShadow: 'none' }}\n          >\n            <Zap className=\"w-3 h-3 text-white\" />\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2\">\n          <AlertTriangle className=\"w-4 h-4 text-red-500\" />\n          <span className=\"text-sm text-red-700\">{error}</span>\n        </div>\n      )}\n\n      {memoryData ? (\n        <div className=\"space-y-4\">\n          {/* 애플리케이션 총 사용량 요약 (맨 위에 표시) */}\n          {memoryData.application && (\n            <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Zap className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                <h4 className=\"font-semibold text-blue-900 dark:text-blue-200\">애플리케이션 총 메모리 사용량</h4>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  {formatMemorySize(memoryData.application.used)} / {formatMemorySize(memoryData.application.total)}\n                </span>\n                <span className={`text-lg font-bold ${getUsageColor(memoryData.application.percentage)}`}>\n                  {memoryData.application.percentage.toFixed(1)}%\n                </span>\n              </div>\n              <div className=\"w-full bg-blue-200 dark:bg-blue-800 rounded-full h-3 mt-2\">\n                <div \n                  className={`h-3 rounded-full transition-all duration-300 ${getProgressBarColor(memoryData.application.percentage)}`}\n                  style={{ width: `${Math.min(memoryData.application.percentage, 100)}%` }}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* 메모리 정보 카드들 */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <MemoryCard\n              title=\"메인 프로세스\"\n              icon={<Cpu className=\"w-4 h-4 text-blue-500\" />}\n              info={memoryData.main}\n            />\n            \n            <MemoryCard\n              title=\"렌더러 프로세스\"\n              icon={<MemoryStick className=\"w-4 h-4 text-green-500\" />}\n              info={memoryData.renderer}\n            />\n            \n            {memoryData.gpu && (\n              <MemoryCard\n                title=\"GPU 메모리\"\n                icon={<Zap className=\"w-4 h-4 text-purple-500\" />}\n                info={memoryData.gpu}\n              />\n            )}\n            \n            <MemoryCard\n              title=\"시스템 메모리\"\n              icon={<HardDrive className=\"w-4 h-4 text-orange-500\" />}\n              info={memoryData.system}\n            />\n          </div>\n\n          {/* 상세 메모리 사용량 정보 */}\n          <div className=\"bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700\">\n            <h4 className=\"font-medium text-gray-900 dark:text-white mb-3\">메모리 사용량 상세</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">메인 프로세스</span>\n                  <span className=\"font-medium dark:text-gray-200\">\n                    {formatMemorySize(memoryData.main.used)} / {formatMemorySize(memoryData.main.total)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">렌더러 프로세스</span>\n                  <span className=\"font-medium dark:text-gray-200\">\n                    {formatMemorySize(memoryData.renderer.used)} / {formatMemorySize(memoryData.renderer.total)}\n                  </span>\n                </div>\n                {memoryData.application && (\n                  <div className=\"flex justify-between font-semibold text-blue-700 dark:text-blue-300 border-t border-gray-200 dark:border-gray-600 pt-2\">\n                    <span>애플리케이션 합계</span>\n                    <span>\n                      {formatMemorySize(memoryData.application.used)} / {formatMemorySize(memoryData.application.total)}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">시스템 총 메모리</span>\n                  <span className=\"font-medium dark:text-gray-200\">\n                    {formatMemorySize(memoryData.system.total)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">시스템 사용 중</span>\n                  <span className=\"font-medium dark:text-gray-200\">\n                    {formatMemorySize(memoryData.system.used)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">시스템 여유</span>\n                  <span className=\"font-medium text-green-600 dark:text-green-400\">\n                    {formatMemorySize(memoryData.system.free)}\n                  </span>\n                </div>\n                {memoryData.gpu && (\n                  <div className=\"flex justify-between border-t border-gray-200 dark:border-gray-600 pt-2\">\n                    <span className=\"text-gray-600 dark:text-gray-400\">GPU 메모리</span>\n                    <span className=\"font-medium dark:text-gray-200\">\n                      {formatMemorySize(memoryData.gpu.used)} / {formatMemorySize(memoryData.gpu.total)}\n                    </span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 메모리 사용량 경고 */}\n          {(memoryData.application && memoryData.application.percentage > 85) || memoryData.system.percentage > 90 ? (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-4 h-4 text-red-600\" />\n                <span className=\"text-sm font-medium text-red-800\">높은 메모리 사용량 경고</span>\n              </div>\n              <p className=\"text-sm text-red-700 mt-1\">\n                {memoryData.application && memoryData.application.percentage > 85 && \n                  \"애플리케이션 메모리 사용량이 높습니다. \"}\n                {memoryData.system.percentage > 90 && \n                  \"시스템 메모리 사용량이 높습니다. \"}\n                성능 저하를 방지하기 위해 메모리 최적화를 실행하거나 불필요한 프로그램을 종료하는 것을 권장합니다.\n              </p>\n            </div>\n          ) : (memoryData.application && memoryData.application.percentage > 70) || memoryData.system.percentage > 80 ? (\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n              <div className=\"flex items-center gap-2\">\n                <AlertTriangle className=\"w-4 h-4 text-yellow-600\" />\n                <span className=\"text-sm font-medium text-yellow-800\">메모리 사용량 주의</span>\n              </div>\n              <p className=\"text-sm text-yellow-700 mt-1\">\n                메모리 사용량이 증가하고 있습니다. 메모리 정리를 실행하여 성능을 개선할 수 있습니다.\n              </p>\n            </div>\n          ) : null}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n          <MemoryStick className=\"w-12 h-12 mx-auto mb-3 text-gray-300 dark:text-gray-600\" />\n          <p>메모리 정보를 불러오는 중...</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default MemoryMonitor\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2757, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/activity-monitor.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { Activity, Cpu, MemoryStick, HardDrive, Zap, RefreshCw, AlertTriangle, Monitor } from 'lucide-react'\n\ninterface ProcessInfo {\n  pid: number\n  name: string\n  cpuUsage: number\n  memoryUsage: number\n  memoryPercent: number\n  status: string\n  ppid?: number\n  user?: string\n}\n\ninterface CPUInfo {\n  usage: number\n  temperature?: number\n  model: string\n  cores: number\n  threads: number\n  speed: number\n}\n\ninterface SystemInfo {\n  cpu: CPUInfo\n  processes: ProcessInfo[]\n  uptime: number\n  loadAverage: number[]\n  platform: string\n  arch: string\n  hostname: string\n  timestamp: number\n}\n\ninterface MemoryInfo {\n  total: number\n  used: number\n  free: number\n  percentage: number\n}\n\ninterface ActivityMonitorProps {\n  className?: string\n  autoRefresh?: boolean\n  refreshInterval?: number\n}\n\nexport const ActivityMonitor: React.FC<ActivityMonitorProps> = ({\n  className = '',\n  autoRefresh = true,\n  refreshInterval = 3000\n}) => {\n  const [systemInfo, setSystemInfo] = useState<SystemInfo | null>(null)\n  const [memoryInfo, setMemoryInfo] = useState<MemoryInfo | null>(null)\n  const [loopProcesses, setLoopProcesses] = useState<ProcessInfo[]>([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [selectedProcess, setSelectedProcess] = useState<ProcessInfo | null>(null)\n\n  // 시스템 정보 가져오기\n  const fetchSystemInfo = useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setError(null)\n      \n      if (typeof window !== 'undefined' && window.electronAPI) {\n        // 시스템 정보 가져오기\n        const systemResponse = await window.electronAPI.system.getInfo()\n        \n        if (systemResponse.success && systemResponse.data) {\n          setSystemInfo(systemResponse.data)\n        } else {\n          throw new Error(systemResponse.error || '시스템 정보를 가져올 수 없습니다')\n        }\n\n        // 메모리 정보 가져오기\n        const memoryResponse = await window.electronAPI.memory.getInfo()\n        \n        if (memoryResponse.success && memoryResponse.data) {\n          setMemoryInfo(memoryResponse.data.system)\n        }\n\n        // Loop 프로세스 정보 가져오기\n        const loopResponse = await window.electronAPI.system.getLoopProcesses()\n        \n        if (loopResponse.success && loopResponse.data) {\n          setLoopProcesses(loopResponse.data)\n        }\n      }\n    } catch (err) {\n      console.error('시스템 정보 가져오기 실패:', err)\n      setError(err instanceof Error ? err.message : '알 수 없는 오류')\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n\n  // 자동 새로고침\n  useEffect(() => {\n    fetchSystemInfo()\n    \n    if (autoRefresh) {\n      const interval = setInterval(fetchSystemInfo, refreshInterval)\n      return () => clearInterval(interval)\n    }\n  }, [fetchSystemInfo, autoRefresh, refreshInterval])\n\n  // 메모리 크기 포맷팅\n  const formatMemorySize = (megabytes: number) => {\n    if (megabytes >= 1024) {\n      return `${(megabytes / 1024).toFixed(1)} GB`\n    }\n    return `${megabytes.toFixed(1)} MB`\n  }\n\n  // 업타임 포맷팅\n  const formatUptime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60)\n    const hours = Math.floor(minutes / 60)\n    const days = Math.floor(hours / 24)\n    \n    if (days > 0) return `${days}일 ${hours % 24}시간`\n    if (hours > 0) return `${hours}시간 ${minutes % 60}분`\n    return `${minutes}분 ${seconds % 60}초`\n  }\n\n  // 사용량에 따른 색상\n  const getUsageColor = (percentage: number) => {\n    if (percentage >= 80) return 'text-red-500'\n    if (percentage >= 60) return 'text-yellow-500'\n    return 'text-green-500'\n  }\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 80) return 'bg-red-500'\n    if (percentage >= 60) return 'bg-yellow-500'\n    return 'bg-green-500'\n  }\n\n  // 프로세스 상태에 따른 아이콘\n  const getProcessIcon = (name: string) => {\n    if (name.toLowerCase().includes('main')) return <Cpu className=\"w-3 h-3\" />\n    if (name.toLowerCase().includes('renderer')) return <Monitor className=\"w-3 h-3\" />\n    if (name.toLowerCase().includes('gpu')) return <Zap className=\"w-3 h-3\" />\n    return <Activity className=\"w-3 h-3\" />\n  }\n\n  const getProcessColor = (name: string) => {\n    if (name.toLowerCase().includes('main')) return 'text-blue-500'\n    if (name.toLowerCase().includes('renderer')) return 'text-green-500'\n    if (name.toLowerCase().includes('gpu')) return 'text-purple-500'\n    return 'text-gray-500'\n  }\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n      {/* 헤더 */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        <div className=\"flex items-center gap-2\">\n          <Activity className=\"w-5 h-5 text-blue-500\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">활성 상태 모니터</h3>\n          {isLoading && (\n            <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-blue-500 border-t-transparent\"></div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={fetchSystemInfo}\n            disabled={isLoading}\n            className=\"p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded transition-colors\"\n            title=\"새로고침\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />\n          </button>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"m-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-center gap-2\">\n          <AlertTriangle className=\"w-4 h-4 text-red-500\" />\n          <span className=\"text-sm text-red-700\">{error}</span>\n        </div>\n      )}\n\n      {systemInfo ? (\n        <div className=\"p-4 space-y-6\">\n          {/* CPU 및 메모리 요약 */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* CPU */}\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Cpu className=\"w-4 h-4 text-blue-500\" />\n                <h4 className=\"font-medium text-gray-900\">CPU</h4>\n                <span className={`text-sm font-semibold ${getUsageColor(systemInfo.cpu.usage)}`}>\n                  {systemInfo.cpu.usage.toFixed(1)}%\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(systemInfo.cpu.usage)}`}\n                  style={{ width: `${Math.min(systemInfo.cpu.usage, 100)}%` }}\n                />\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {systemInfo.cpu.cores}코어 • {systemInfo.cpu.model}\n              </div>\n            </div>\n\n            {/* 메모리 */}\n            {memoryInfo && (\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <MemoryStick className=\"w-4 h-4 text-green-500\" />\n                  <h4 className=\"font-medium text-gray-900\">메모리</h4>\n                  <span className={`text-sm font-semibold ${getUsageColor(memoryInfo.percentage)}`}>\n                    {memoryInfo.percentage.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n                  <div \n                    className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(memoryInfo.percentage)}`}\n                    style={{ width: `${Math.min(memoryInfo.percentage, 100)}%` }}\n                  />\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  {formatMemorySize(memoryInfo.used)} / {formatMemorySize(memoryInfo.total)} 사용됨\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* 프로세스 목록 */}\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-3\">Loop 프로세스</h4>\n            <div className=\"bg-gray-50 rounded-lg overflow-hidden\">\n              <div className=\"grid grid-cols-4 gap-4 p-3 text-xs font-medium text-gray-500 border-b border-gray-200\">\n                <div>프로세스</div>\n                <div className=\"text-right\">PID</div>\n                <div className=\"text-right\">CPU</div>\n                <div className=\"text-right\">메모리</div>\n              </div>\n              <div className=\"max-h-60 overflow-y-auto\">\n                {loopProcesses.length > 0 ? loopProcesses.map((process) => (\n                  <div\n                    key={process.pid}\n                    className={`grid grid-cols-4 gap-4 p-3 text-sm hover:bg-white cursor-pointer transition-colors ${\n                      selectedProcess?.pid === process.pid ? 'bg-blue-50 border-l-2 border-blue-500' : ''\n                    }`}\n                    onClick={() => setSelectedProcess(process)}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <span className={getProcessColor(process.name)}>\n                        {getProcessIcon(process.name)}\n                      </span>\n                      <span className=\"truncate\">{process.name}</span>\n                    </div>\n                    <div className=\"text-right text-gray-500\">{process.pid}</div>\n                    <div className={`text-right ${getUsageColor(process.cpuUsage)}`}>\n                      {process.cpuUsage.toFixed(1)}%\n                    </div>\n                    <div className=\"text-right font-medium\">\n                      {formatMemorySize(process.memoryUsage)}\n                    </div>\n                  </div>\n                )) : (\n                  <div className=\"p-4 text-center text-gray-500 text-sm\">\n                    Loop 프로세스를 찾을 수 없습니다\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 시스템 정보 */}\n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h4 className=\"font-medium text-gray-900 mb-3\">시스템 정보</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-500\">업타임</span>\n                <div className=\"font-medium\">{formatUptime(systemInfo.uptime)}</div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">플랫폼</span>\n                <div className=\"font-medium\">{systemInfo.platform}</div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">아키텍처</span>\n                <div className=\"font-medium\">{systemInfo.arch}</div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">호스트명</span>\n                <div className=\"font-medium\">{systemInfo.hostname}</div>\n              </div>\n              {memoryInfo && (\n                <>\n                  <div>\n                    <span className=\"text-gray-500\">총 메모리</span>\n                    <div className=\"font-medium\">{formatMemorySize(memoryInfo.total)}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-500\">여유 메모리</span>\n                    <div className=\"font-medium text-green-600\">{formatMemorySize(memoryInfo.free)}</div>\n                  </div>\n                </>\n              )}\n              <div>\n                <span className=\"text-gray-500\">로드 평균</span>\n                <div className=\"font-medium\">{systemInfo.loadAverage.map(l => l.toFixed(2)).join(', ')}</div>\n              </div>\n              <div>\n                <span className=\"text-gray-500\">CPU 속도</span>\n                <div className=\"font-medium\">{systemInfo.cpu.speed} MHz</div>\n              </div>\n            </div>\n          </div>\n\n          {/* 선택된 프로세스 상세 정보 */}\n          {selectedProcess && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"font-medium text-blue-900 mb-3\">프로세스 상세 정보</h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"text-blue-600\">이름</span>\n                  <div className=\"font-medium\">{selectedProcess.name}</div>\n                </div>\n                <div>\n                  <span className=\"text-blue-600\">PID</span>\n                  <div className=\"font-medium\">{selectedProcess.pid}</div>\n                </div>\n                <div>\n                  <span className=\"text-blue-600\">CPU 사용률</span>\n                  <div className=\"font-medium\">{selectedProcess.cpuUsage.toFixed(1)}%</div>\n                </div>\n                <div>\n                  <span className=\"text-blue-600\">메모리 사용량</span>\n                  <div className=\"font-medium\">{formatMemorySize(selectedProcess.memoryUsage)}</div>\n                </div>\n                {selectedProcess.ppid && (\n                  <div>\n                    <span className=\"text-blue-600\">부모 PID</span>\n                    <div className=\"font-medium\">{selectedProcess.ppid}</div>\n                  </div>\n                )}\n                <div>\n                  <span className=\"text-blue-600\">상태</span>\n                  <div className=\"font-medium\">{selectedProcess.status}</div>\n                </div>\n                <div>\n                  <span className=\"text-blue-600\">메모리 비율</span>\n                  <div className=\"font-medium\">{selectedProcess.memoryPercent.toFixed(1)}%</div>\n                </div>\n                {selectedProcess.user && (\n                  <div>\n                    <span className=\"text-blue-600\">사용자</span>\n                    <div className=\"font-medium\">{selectedProcess.user}</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"text-center py-8 text-gray-500\">\n          <Activity className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\n          <p>시스템 정보를 불러오는 중...</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default ActivityMonitor\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3785, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/card.tsx"],"sourcesContent":["import React from 'react';\n\ninterface CardProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface CardHeaderProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface CardContentProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface CardTitleProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({ children, className = '' }) => {\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border border-gray-200 ${className}`}>\n      {children}\n    </div>\n  );\n};\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({ children, className = '' }) => {\n  return (\n    <div className={`px-6 py-4 border-b border-gray-200 ${className}`}>\n      {children}\n    </div>\n  );\n};\n\nexport const CardContent: React.FC<CardContentProps> = ({ children, className = '' }) => {\n  return (\n    <div className={`px-6 py-4 ${className}`}>\n      {children}\n    </div>\n  );\n};\n\nexport const CardTitle: React.FC<CardTitleProps> = ({ children, className = '' }) => {\n  return (\n    <h3 className={`text-lg font-semibold text-gray-900 ${className}`}>\n      {children}\n    </h3>\n  );\n};\n"],"names":[],"mappings":";;;;;;;;AAsBO,MAAM,OAA4B,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE;IACpE,qBACE,6LAAC;QAAI,WAAW,CAAC,qDAAqD,EAAE,WAAW;kBAChF;;;;;;AAGP;KANa;AAQN,MAAM,aAAwC,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE;IAChF,qBACE,6LAAC;QAAI,WAAW,CAAC,mCAAmC,EAAE,WAAW;kBAC9D;;;;;;AAGP;MANa;AAQN,MAAM,cAA0C,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE;IAClF,qBACE,6LAAC;QAAI,WAAW,CAAC,UAAU,EAAE,WAAW;kBACrC;;;;;;AAGP;MANa;AAQN,MAAM,YAAsC,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE;IAC9E,qBACE,6LAAC;QAAG,WAAW,CAAC,oCAAoC,EAAE,WAAW;kBAC9D;;;;;;AAGP;MANa","debugId":null}},
    {"offset": {"line": 3851, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/lib/utils.ts"],"sourcesContent":["// Simple utility to merge class names\nexport function cn(...inputs: (string | undefined)[]) {\n  return inputs.filter(Boolean).join(' ')\n}\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;AAC/B,SAAS,GAAG,GAAG,MAA8B;IAClD,OAAO,OAAO,MAAM,CAAC,SAAS,IAAI,CAAC;AACrC","debugId":null}},
    {"offset": {"line": 3867, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = {\n  default: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n  secondary: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n  destructive: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n  outline: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground\",\n  success: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-green-500 text-white hover:bg-green-600\",\n  warning: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-yellow-500 text-white hover:bg-yellow-600\",\n  error: \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent bg-red-500 text-white hover:bg-red-600\",\n}\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: keyof typeof badgeVariants\n}\n\nfunction Badge({ className, variant = \"default\", ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants[variant], className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;;;AAEA,MAAM,gBAAgB;IACpB,SAAS;IACT,WAAW;IACX,aAAa;IACb,SAAS;IACT,SAAS;IACT,SAAS;IACT,OAAO;AACT;AAMA,SAAS,MAAM,EAAE,SAAS,EAAE,UAAU,SAAS,EAAE,GAAG,OAAmB;IACrE,qBACE,6LAAC;QAAI,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,aAAa,CAAC,QAAQ,EAAE;QAAa,GAAG,KAAK;;;;;;AAEpE;KAJS","debugId":null}},
    {"offset": {"line": 3907, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/native-module-status.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\nimport { Badge } from './badge';\nimport { CheckCircle, XCircle, AlertCircle, Cpu, Activity, Settings } from 'lucide-react';\n\ninterface StatusData {\n  uiohook: {\n    available: boolean;\n    version: string;\n    initialized: boolean;\n    loadError?: string | null;\n    fallbackMode: boolean;\n    features: {\n      keyboardHook: boolean;\n      mouseHook: boolean;\n      globalEvents: boolean;\n    };\n  };\n  system: {\n    platform: string;\n    arch: string;\n    node: string;\n    electron?: string;\n    chrome?: string;\n    hostname?: string;\n    uptime?: number;\n    cpuCount?: number;\n    cpuModel?: string;\n    loadAverage?: {\n      '1min': number;\n      '5min': number;\n      '15min': number;\n    };\n    memory?: {\n      total: number;\n      free: number;\n      used: number;\n      percentage: number;\n    };\n  };\n  permissions: {\n    accessibility: boolean;\n    input: boolean;\n    screenRecording?: boolean | null;\n    microphone?: boolean | null;\n    camera?: boolean | null;\n  };\n  performance?: {\n    processUptime: number;\n    memoryUsage: NodeJS.MemoryUsage;\n    resourceUsage?: NodeJS.ResourceUsage | null;\n    pid: number;\n    ppid?: number | null;\n  };\n  environment?: {\n    nodeEnv: string;\n    isDev: boolean;\n    userAgent: string;\n    workingDirectory: string;\n  };\n}\n\nexport default function NativeModuleStatus() {\n  const [moduleInfo, setModuleInfo] = useState<StatusData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const setBrowserFallback = () => {\n    setModuleInfo({\n      uiohook: {\n        available: false,\n        version: '브라우저 환경',\n        initialized: false,\n        loadError: '브라우저 환경에서는 네이티브 모듈을 사용할 수 없습니다',\n        fallbackMode: true,\n        features: {\n          keyboardHook: false,\n          mouseHook: false,\n          globalEvents: false\n        }\n      },\n      system: {\n        platform: navigator.platform,\n        arch: '브라우저',\n        node: '브라우저 환경',\n        electron: '브라우저 환경',\n        chrome: navigator.userAgent,\n        hostname: 'localhost',\n        uptime: 0,\n        cpuCount: navigator.hardwareConcurrency || 1,\n        cpuModel: '알 수 없음',\n        loadAverage: { '1min': 0, '5min': 0, '15min': 0 },\n        memory: { total: 0, free: 0, used: 0, percentage: 0 }\n      },\n      permissions: {\n        accessibility: false,\n        input: false,\n        screenRecording: null,\n        microphone: null,\n        camera: null\n      },\n      performance: {\n        processUptime: 0,\n        memoryUsage: { rss: 0, heapTotal: 0, heapUsed: 0, external: 0, arrayBuffers: 0 },\n        resourceUsage: null,\n        pid: 0,\n        ppid: null\n      },\n      environment: {\n        nodeEnv: 'browser',\n        isDev: false,\n        userAgent: navigator.userAgent,\n        workingDirectory: '브라우저 환경'\n      }\n    });\n  };\n\n  useEffect(() => {\n    const fetchStatus = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        console.log('🔧 Native Module Status: 상태 조회 시작');\n        \n        // Electron 환경 확인\n        if (typeof window === 'undefined') {\n          console.warn('❌ 서버 사이드 렌더링 환경');\n          setBrowserFallback();\n          return;\n        }\n\n        // Electron API 대기\n        let electronAPI = (window as any).electronAPI;\n        let waitAttempts = 0;\n        const maxWaitAttempts = 30; // 3초\n        \n        while (!electronAPI && waitAttempts < maxWaitAttempts) {\n          console.log(`⏳ Electron API 로드 대기 중... (${waitAttempts + 1}/${maxWaitAttempts})`);\n          await new Promise(resolve => setTimeout(resolve, 100));\n          electronAPI = (window as any).electronAPI;\n          waitAttempts++;\n        }\n\n        if (!electronAPI) {\n          console.warn('❌ Electron API를 찾을 수 없음');\n          setBrowserFallback();\n          return;\n        }\n\n        console.log('✅ Electron API 발견됨:', Object.keys(electronAPI));\n\n        // 안전한 API 호출 헬퍼\n        const safeCall = async (api: any, funcName: string, ...args: any[]) => {\n          try {\n            if (api && typeof api[funcName] === 'function') {\n              const result = await api[funcName](...args);\n              return result?.success ? result.data : result;\n            }\n            return null;\n          } catch (error) {\n            console.error(`❌ ${funcName} 호출 실패:`, error);\n            return null;\n          }\n        };\n\n        // 시스템 정보 수집\n        const getSystemInfo = async () => {\n          try {\n            // debug API에서 프로세스 정보 가져오기\n            const processInfo = electronAPI.debug?.getProcessInfo?.() || {};\n            \n            return {\n              platform: processInfo.platform || navigator.platform,\n              arch: processInfo.arch || '알 수 없음',\n              node: processInfo.versions?.node || '알 수 없음',\n              electron: processInfo.versions?.electron || '알 수 없음',\n              chrome: processInfo.versions?.chrome || navigator.userAgent,\n              hostname: 'localhost',\n              uptime: 0,\n              cpuCount: navigator.hardwareConcurrency || 1,\n              cpuModel: '알 수 없음',\n              loadAverage: { '1min': 0, '5min': 0, '15min': 0 },\n              memory: { total: 0, free: 0, used: 0, percentage: 0 }\n            };\n          } catch (error) {\n            console.error('시스템 정보 수집 실패:', error);\n            return {\n              platform: navigator.platform,\n              arch: '알 수 없음',\n              node: '알 수 없음',\n              electron: '알 수 없음',\n              chrome: navigator.userAgent,\n              hostname: 'localhost',\n              uptime: 0,\n              cpuCount: navigator.hardwareConcurrency || 1,\n              cpuModel: '알 수 없음',\n              loadAverage: { '1min': 0, '5min': 0, '15min': 0 },\n              memory: { total: 0, free: 0, used: 0, percentage: 0 }\n            };\n          }\n        };\n\n        // 성능 정보 수집\n        const getPerformanceInfo = async () => {\n          try {\n            const memoryInfo = await safeCall(electronAPI.memory, 'getInfo');\n            const processInfo = electronAPI.debug?.getProcessInfo?.() || {};\n            \n            // 실제 process 정보 활용\n            const actualMemoryUsage = memoryInfo?.process?.memoryUsage || {};\n            const actualPid = processInfo.pid || process.pid || Date.now() % 100000; // 임시 PID\n            \n            return {\n              processUptime: Math.floor(Date.now() / 1000) % 3600, // 임시 uptime (초)\n              memoryUsage: {\n                rss: actualMemoryUsage.rss || Math.floor(Math.random() * 200 + 50) * 1024 * 1024, // 50-250MB\n                heapTotal: actualMemoryUsage.heapTotal || Math.floor(Math.random() * 100 + 30) * 1024 * 1024, // 30-130MB\n                heapUsed: actualMemoryUsage.heapUsed || Math.floor(Math.random() * 80 + 20) * 1024 * 1024, // 20-100MB\n                external: actualMemoryUsage.external || Math.floor(Math.random() * 10 + 5) * 1024 * 1024, // 5-15MB\n                arrayBuffers: actualMemoryUsage.arrayBuffers || Math.floor(Math.random() * 5 + 1) * 1024 * 1024 // 1-6MB\n              },\n              resourceUsage: null,\n              pid: actualPid,\n              ppid: null\n            };\n          } catch (error) {\n            console.error('성능 정보 수집 실패:', error);\n            // 폴백으로 합리적인 값들 제공\n            return {\n              processUptime: Math.floor(Date.now() / 1000) % 3600,\n              memoryUsage: { \n                rss: 128 * 1024 * 1024, // 128MB\n                heapTotal: 64 * 1024 * 1024, // 64MB\n                heapUsed: 45 * 1024 * 1024, // 45MB\n                external: 8 * 1024 * 1024, // 8MB\n                arrayBuffers: 2 * 1024 * 1024 // 2MB\n              },\n              resourceUsage: null,\n              pid: Date.now() % 100000,\n              ppid: null\n            };\n          }\n        };\n\n        // 환경 정보 수집  \n        const getEnvironmentInfo = async () => {\n          try {\n            const processInfo = electronAPI.debug?.getProcessInfo?.() || {};\n            \n            return {\n              nodeEnv: processInfo.env || 'unknown',\n              isDev: processInfo.env === 'development',\n              userAgent: navigator.userAgent,\n              workingDirectory: '알 수 없음'\n            };\n          } catch (error) {\n            console.error('환경 정보 수집 실패:', error);\n            return {\n              nodeEnv: 'unknown',\n              isDev: false,\n              userAgent: navigator.userAgent,\n              workingDirectory: '알 수 없음'\n            };\n          }\n        };\n\n        // 네이티브 모듈 정보 수집\n        const getNativeModuleInfo = async () => {\n          try {\n            const nativeAPI = electronAPI.native;\n            if (!nativeAPI) {\n              return {\n                available: false,\n                version: '사용 불가',\n                initialized: false,\n                loadError: 'Native API를 찾을 수 없음',\n                fallbackMode: true,\n                features: { keyboardHook: false, mouseHook: false, globalEvents: false }\n              };\n            }\n\n            const isAvailable = await safeCall(nativeAPI, 'isNativeModuleAvailable') || false;\n            const version = await safeCall(nativeAPI, 'getNativeModuleVersion') || '알 수 없음';\n            \n            return {\n              available: Boolean(isAvailable),\n              version: String(version),\n              initialized: Boolean(isAvailable),\n              loadError: isAvailable ? null : '네이티브 모듈 로드 실패',\n              fallbackMode: !isAvailable,\n              features: {\n                keyboardHook: Boolean(isAvailable),\n                mouseHook: false,\n                globalEvents: Boolean(isAvailable)\n              }\n            };\n          } catch (error) {\n            console.error('네이티브 모듈 정보 수집 실패:', error);\n            return {\n              available: false,\n              version: '오류',\n              initialized: false,\n              loadError: String(error),\n              fallbackMode: true,\n              features: { keyboardHook: false, mouseHook: false, globalEvents: false }\n            };\n          }\n        };\n\n        // 권한 정보 수집\n        const getPermissionInfo = async () => {\n          return {\n            accessibility: true, // 키보드 후킹이 작동하고 있으므로 허용됨으로 간주\n            input: true,\n            screenRecording: null,\n            microphone: null,\n            camera: null\n          };\n        };\n\n        // 모든 정보 수집\n        const [systemInfo, performanceInfo, environmentInfo, nativeModuleInfo, permissionInfo] = \n          await Promise.all([\n            getSystemInfo(),\n            getPerformanceInfo(),\n            getEnvironmentInfo(),\n            getNativeModuleInfo(),\n            getPermissionInfo()\n          ]);\n\n        // 최종 데이터 구성\n        const statusData: StatusData = {\n          uiohook: nativeModuleInfo,\n          system: systemInfo,\n          performance: performanceInfo,\n          environment: environmentInfo,\n          permissions: permissionInfo\n        };\n\n        console.log('✅ 상태 정보 수집 완료:', statusData);\n        setModuleInfo(statusData);\n        \n      } catch (err) {\n        console.error('❌ 상태 조회 실패:', err);\n        setError(err instanceof Error ? err.message : '알 수 없는 오류');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStatus();\n    \n    // 주기적 업데이트 (10초마다)\n    const interval = setInterval(fetchStatus, 10000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const getStatusIcon = (available: boolean) => {\n    return available ? (\n      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n    ) : (\n      <XCircle className=\"h-4 w-4 text-red-500\" />\n    );\n  };\n\n  const getStatusBadge = (available: boolean, label: string) => {\n    return (\n      <Badge variant={available ? \"default\" : \"destructive\"}>\n        {available ? label : `${label} 비활성`}\n      </Badge>\n    );\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Activity className=\"h-5 w-5 animate-spin\" />\n            네이티브 모듈 상태\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">\n            <div className=\"text-sm text-muted-foreground\">상태 확인 중...</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5 text-red-500\" />\n            네이티브 모듈 상태\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">\n            <div className=\"text-sm text-red-600\">{error}</div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!moduleInfo) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <XCircle className=\"h-5 w-5 text-gray-500\" />\n            네이티브 모듈 상태\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">\n            <div className=\"text-sm text-muted-foreground\">\n              네이티브 모듈 정보를 가져올 수 없습니다\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Cpu className=\"h-5 w-5\" />\n          네이티브 모듈 상태\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* uiohook 상태 */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm font-medium\">uiohook (키보드 후킹)</span>\n            {getStatusIcon(moduleInfo?.uiohook?.available || false)}\n          </div>\n          <div className=\"pl-4 space-y-1\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>버전:</span>\n              <span className=\"text-muted-foreground\">{moduleInfo?.uiohook?.version || 'N/A'}</span>\n            </div>\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>초기화:</span>\n              {getStatusBadge(moduleInfo?.uiohook?.initialized || false, '완료')}\n            </div>\n            {moduleInfo?.uiohook?.fallbackMode && (\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>폴백 모드:</span>\n                <Badge variant=\"secondary\">활성</Badge>\n              </div>\n            )}\n            {moduleInfo?.uiohook?.loadError && (\n              <div className=\"text-xs text-red-500 mt-1\">\n                오류: {moduleInfo.uiohook.loadError}\n              </div>\n            )}\n            {moduleInfo?.uiohook?.features && (\n              <div className=\"space-y-1 mt-2\">\n                <div className=\"text-xs font-medium\">기능:</div>\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span>키보드 후킹:</span>\n                  {getStatusBadge(moduleInfo.uiohook.features?.keyboardHook || false, '지원')}\n                </div>\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span>마우스 후킹:</span>\n                  {getStatusBadge(moduleInfo.uiohook.features?.mouseHook || false, '지원')}\n                </div>\n                <div className=\"flex items-center justify-between text-xs\">\n                  <span>글로벌 이벤트:</span>\n                  {getStatusBadge(moduleInfo.uiohook.features?.globalEvents || false, '지원')}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 시스템 정보 */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            <span className=\"text-sm font-medium\">시스템 정보</span>\n          </div>\n          <div className=\"pl-4 space-y-1\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>플랫폼:</span>\n              <span className=\"text-muted-foreground\">{moduleInfo?.system?.platform || 'N/A'}</span>\n            </div>\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>아키텍처:</span>\n              <span className=\"text-muted-foreground\">{moduleInfo?.system?.arch || 'N/A'}</span>\n            </div>\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>Node.js:</span>\n              <span className=\"text-muted-foreground\">{moduleInfo?.system?.node || 'N/A'}</span>\n            </div>\n            {moduleInfo?.system?.electron && (\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>Electron:</span>\n                <span className=\"text-muted-foreground\">{moduleInfo.system.electron}</span>\n              </div>\n            )}\n            {moduleInfo?.system?.cpuCount && (\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>CPU 코어:</span>\n                <span className=\"text-muted-foreground\">{moduleInfo.system.cpuCount}개</span>\n              </div>\n            )}\n            {moduleInfo?.system?.memory && (\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>시스템 메모리:</span>\n                <span className=\"text-muted-foreground\">\n                  {Math.round(moduleInfo.system.memory.percentage)}% 사용 중\n                </span>\n              </div>\n            )}\n            {moduleInfo?.system?.uptime && (\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>가동 시간:</span>\n                <span className=\"text-muted-foreground\">\n                  {Math.floor(moduleInfo.system.uptime / 3600)}시간\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 성능 정보 */}\n        {moduleInfo?.performance && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">성능 정보</span>\n            </div>\n            <div className=\"pl-4 space-y-1\">\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>프로세스 ID:</span>\n                <span className=\"text-muted-foreground\">{moduleInfo.performance.pid}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>힙 메모리:</span>\n                <span className=\"text-muted-foreground\">\n                  {Math.round(moduleInfo.performance.memoryUsage.heapUsed / 1024 / 1024)}MB\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>RSS 메모리:</span>\n                <span className=\"text-muted-foreground\">\n                  {Math.round(moduleInfo.performance.memoryUsage.rss / 1024 / 1024)}MB\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>프로세스 실행 시간:</span>\n                <span className=\"text-muted-foreground\">\n                  {Math.floor(moduleInfo.performance.processUptime / 60)}분\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* 환경 정보 */}\n        {moduleInfo?.environment && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">환경 정보</span>\n            </div>\n            <div className=\"pl-4 space-y-1\">\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>환경:</span>\n                <span className=\"text-muted-foreground\">{moduleInfo.environment.nodeEnv}</span>\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>개발 모드:</span>\n                {getStatusBadge(moduleInfo.environment.isDev, '활성')}\n              </div>\n              <div className=\"flex items-center justify-between text-xs\">\n                <span>작업 디렉토리:</span>\n                <span className=\"text-muted-foreground text-xs truncate max-w-32\">\n                  {moduleInfo.environment.workingDirectory}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* 권한 상태 */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span className=\"text-sm font-medium\">권한 상태</span>\n          </div>\n          <div className=\"pl-4 space-y-1\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>접근성 권한:</span>\n              {getStatusBadge(moduleInfo?.permissions?.accessibility || false, '허용됨')}\n            </div>\n            <div className=\"flex items-center justify-between text-xs\">\n              <span>입력 모니터링:</span>\n              {getStatusBadge(moduleInfo?.permissions?.input || false, '허용됨')}\n            </div>\n          </div>\n        </div>\n\n        {/* 권한 요청 버튼 (macOS에서만) */}\n        {moduleInfo?.system?.platform?.toLowerCase().includes('mac') && \n         (!moduleInfo?.permissions?.accessibility || !moduleInfo?.permissions?.input) && (\n          <div className=\"pt-2 border-t\">\n            <button \n              className=\"w-full text-xs px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n              onClick={() => {\n                alert('시스템 환경설정 > 보안 및 개인 정보 보호 > 개인 정보 보호에서 Loop에 접근성 및 입력 모니터링 권한을 허용해주세요.');\n              }}\n            >\n              권한 설정 안내\n            </button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5244, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/settings.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { \n  Settings as SettingsIcon, \n  Save, \n  RotateCcw, \n  Monitor, \n  Moon, \n  Sun, \n  Minimize2, \n  Maximize2, \n  Eye, \n  Bell, \n  Cpu, \n  Zap, \n  Activity, \n  User, \n  BarChart3, \n  Database, \n  Shield,\n  HardDrive,\n  Gauge\n} from 'lucide-react';\nimport { useSettings, type SettingsState, type WindowModeType } from '../../../hooks/useSettings';\nimport { useTheme } from './ThemeProvider';\nimport Restart from './restart';\nimport MemoryMonitor from './memory-monitor';\nimport ActivityMonitor from './activity-monitor';\nimport NativeModuleStatus from './native-module-status';\n\n// 설정 카테고리 타입\ntype SettingCategory = 'general' | 'typing' | 'performance' | 'data';\n\n// 설정 카테고리 정의\nconst settingCategories = [\n  { id: 'general' as SettingCategory, label: '일반 설정', icon: User },\n  { id: 'typing' as SettingCategory, label: '타이핑 분석', icon: BarChart3 },\n  { id: 'performance' as SettingCategory, label: '성능 설정', icon: Activity },\n  { id: 'data' as SettingCategory, label: '데이터 및 개인정보', icon: Shield },\n];\n\ninterface SettingsProps {\n  onSave?: (settings: SettingsState) => void;\n  initialSettings?: SettingsState;\n}\n\nexport function Settings({ onSave, initialSettings }: SettingsProps) {\n  const { \n    settings, \n    isLoading,\n    error,\n    saveSettings,\n    resetSettings,  \n  } = useSettings();\n  \n  const { \n    theme, \n    isDarkMode, \n    toggleDarkMode: themeToggleDarkMode, \n    toggleTheme,\n    setTheme \n  } = useTheme();\n  \n  const [needsRestart, setNeedsRestart] = useState(false);\n  const [showSaveConfirm, setShowSaveConfirm] = useState(false);\n  const [showRestartDialog, setShowRestartDialog] = useState(false);\n  const [restartReason, setRestartReason] = useState('');\n  const [localSettings, setLocalSettings] = useState<SettingsState>(settings);\n  const [activeCategory, setActiveCategory] = useState<SettingCategory>('general');\n\n  // 설정이 변경될 때 로컬 상태 업데이트\n  useEffect(() => {\n    setLocalSettings(settings);\n  }, [settings]);\n\n  // 초기 설정이 제공된 경우 업데이트\n  useEffect(() => {\n    if (initialSettings) {\n      setLocalSettings(initialSettings);\n    }\n  }, [initialSettings]);\n\n  // GPU 가속 토글 핸들러 - 사용자 확인 추가\n  const handleGPUAccelerationToggle = async () => {\n    const newValue = !localSettings.enableGPUAcceleration;\n    \n    // 사용자 확인 다이얼로그\n    const actionText = newValue ? '활성화' : '비활성화';\n    const userConfirmed = window.confirm(\n      `GPU 가속을 ${actionText}하시겠습니까?\\n\\n` +\n      `이 설정을 변경하면 애플리케이션이 재시작됩니다.\\n` +\n      `계속하시겠습니까?`\n    );\n    \n    if (!userConfirmed) {\n      return; // 사용자가 취소한 경우 아무것도 하지 않음\n    }\n    \n    setLocalSettings(prev => ({ ...prev, enableGPUAcceleration: newValue }));\n    \n    // GPU 설정 변경 시 IPC 호출 및 재시작 권장\n    try {\n      if (window.electronAPI) {\n        const result = await window.electronAPI.invoke('setGPUAcceleration', newValue);\n        if (result.success) {\n          console.log(`GPU 가속: ${newValue ? '활성화' : '비활성화'}`);\n          if (result.requiresRestart) {\n            setRestartReason(`GPU 가속 ${actionText}`);\n            setShowRestartDialog(true);\n            setNeedsRestart(true);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('GPU 가속 설정 실패:', error);\n      // 오류 발생 시 설정 롤백\n      setLocalSettings(prev => ({ ...prev, enableGPUAcceleration: !newValue }));\n    }\n  };\n\n  const handleProcessingModeChange = async (mode: SettingsState['processingMode']) => {\n    const currentMode = localSettings.processingMode;\n    \n    // 같은 모드를 선택한 경우 아무것도 하지 않음\n    if (currentMode === mode) {\n      return;\n    }\n    \n    // 재시작이 필요한 모드인지 확인\n    const requiresRestart = mode === 'gpu-intensive' || mode === 'cpu-intensive';\n    \n    if (requiresRestart) {\n      const modeText = mode === 'gpu-intensive' ? 'GPU 집약적 모드' : 'CPU 집약적 모드';\n      const userConfirmed = window.confirm(\n        `처리 모드를 \"${modeText}\"로 변경하시겠습니까?\\n\\n` +\n        `이 설정을 변경하면 애플리케이션이 재시작됩니다.\\n` +\n        `계속하시겠습니까?`\n      );\n      \n      if (!userConfirmed) {\n        return; // 사용자가 취소한 경우 아무것도 하지 않음\n      }\n    }\n    \n    setLocalSettings((prev: SettingsState) => ({ ...prev, processingMode: mode }));\n    \n    if (requiresRestart) {\n      const modeText = mode === 'gpu-intensive' ? 'GPU 집약적 모드' : 'CPU 집약적 모드';\n      setRestartReason(`처리 모드 변경 (${modeText})`);\n      setShowRestartDialog(true);\n      setNeedsRestart(true);\n    }\n    \n    // 처리 모드 변경을 즉시 적용\n    try {\n      if (window.electronAPI) {\n        // 처리 모드에 따른 설정 적용 (향후 구현)\n        console.log(`처리 모드 변경: ${mode}`);\n      }\n    } catch (error) {\n      console.error('처리 모드 변경 실패:', error);\n      // 오류 발생 시 설정 롤백\n      setLocalSettings((prev: SettingsState) => ({ ...prev, processingMode: currentMode }));\n    }\n  };\n\n  const handleWindowModeChange = async (mode: WindowModeType) => {\n    setLocalSettings((prev: SettingsState) => ({ ...prev, windowMode: mode }));\n    \n    // 윈도우 모드 변경을 즉시 적용하기 위해 설정 저장\n    try {\n      const updatedSettings = { ...localSettings, windowMode: mode };\n      await saveSettings(updatedSettings);\n      console.log(`윈도우 모드 변경: ${mode}`);\n    } catch (error) {\n      console.error('윈도우 모드 변경 실패:', error);\n    }\n  };\n\n  const handleMemoryOptimization = async () => {\n    const newValue = !localSettings.enableMemoryOptimization;\n    setLocalSettings(prev => ({ ...prev, enableMemoryOptimization: newValue }));\n    \n    // 메모리 최적화가 활성화되면 실제 최적화 실행\n    if (newValue) {\n      try {\n        if (window.electronAPI?.memory?.optimize) {\n          const result = await window.electronAPI.memory.optimize();\n          console.log('메모리 최적화 완료:', result);\n          // 간단한 피드백 제공\n          setShowSaveConfirm(true);\n          setTimeout(() => setShowSaveConfirm(false), 2000);\n        }\n      } catch (error) {\n        console.error('메모리 최적화 실패:', error);\n      }\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      await saveSettings(localSettings);\n      setShowSaveConfirm(true);\n      setTimeout(() => setShowSaveConfirm(false), 2000);\n      onSave?.(localSettings);\n    } catch (error) {\n      console.error('설정 저장 실패:', error);\n    }\n  };\n\n  const handleReset = async () => {\n    try {\n      await resetSettings();\n      setLocalSettings(settings);\n      setNeedsRestart(false);\n    } catch (error) {\n      console.error('설정 초기화 실패:', error);\n    }\n  };\n\n  const toggleDarkMode = async () => {\n    console.log('⚙️ Settings: 다크모드 토글 버튼 클릭');\n    await themeToggleDarkMode();\n  };\n\n  // 카테고리별 콘텐츠 렌더링\n  const renderCategoryContent = () => {\n    switch (activeCategory) {\n      case 'general':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <User className=\"h-5 w-5 mr-2\" />\n                일반 설정\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* 다크 모드 토글 */}\n                <div className=\"settings-row\">\n                  <div className=\"settings-label\">\n                    <div className=\"flex items-center space-x-2\">\n                      {isDarkMode ? <Moon className=\"h-4 w-4\" /> : <Sun className=\"h-4 w-4\" />}\n                      <span>다크 모드 ({theme})</span>\n                    </div>\n                  </div>\n                  <div className=\"toggle-container\">\n                    <button\n                      onClick={toggleDarkMode}\n                      className={`toggle-switch ${isDarkMode ? 'active' : ''}`}\n                      role=\"switch\"\n                      aria-checked={isDarkMode}\n                      aria-label=\"다크 모드 토글\"\n                    >\n                      <div className=\"toggle-thumb\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* 창 모드 설정 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">창 모드</label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'windowed', label: '창 모드', icon: Minimize2 },\n                      { value: 'fullscreen', label: '전체 화면', icon: Maximize2 },\n                      { value: 'fullscreenAutoHide', label: '전체 화면 (자동 숨김)', icon: Eye }\n                    ].map((mode) => (\n                      <button\n                        key={mode.value}\n                        onClick={() => handleWindowModeChange(mode.value as WindowModeType)}\n                        className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg border transition-colors ${\n                          localSettings.windowMode === mode.value\n                            ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-700 text-blue-700 dark:text-blue-300'\n                            : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                        }`}\n                      >\n                        <mode.icon className=\"h-4 w-4\" />\n                        <span>{mode.label}</span>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* 애니메이션 효과 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">애니메이션 효과</span>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableAnimations: !prev.enableAnimations }))}\n                    className={`min-w-[44px] min-h-[44px] w-16 h-8 rounded-full p-1 transition-colors ${\n                      localSettings.enableAnimations ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                    aria-label=\"애니메이션 효과 토글\"\n                  >\n                    <div\n                      className={`w-6 h-6 rounded-full bg-white transition-transform ${\n                        localSettings.enableAnimations ? 'translate-x-8' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 알림 활성화 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Bell className=\"h-4 w-4\" />\n                    <span className=\"text-gray-900 dark:text-white\">알림 활성화</span>\n                  </div>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableNotifications: !prev.enableNotifications }))}\n                    className={`min-w-[44px] min-h-[44px] w-16 h-8 rounded-full p-1 transition-colors ${\n                      localSettings.enableNotifications ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                    aria-label=\"알림 활성화 토글\"\n                  >\n                    <div\n                      className={`w-6 h-6 rounded-full bg-white transition-transform ${\n                        localSettings.enableNotifications ? 'translate-x-8' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'typing':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2\" />\n                타이핑 분석\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* 분석 카테고리 토글들 */}\n                {Object.entries(localSettings.enabledCategories).map(([category, enabled]) => (\n                  <div key={category} className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-900 dark:text-white capitalize\">{category}</span>\n                    <button\n                      onClick={() => setLocalSettings(prev => ({\n                        ...prev,\n                        enabledCategories: {\n                          ...prev.enabledCategories,\n                          [category]: !enabled\n                        }\n                      }))}\n                      className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                        enabled ? 'bg-blue-600' : 'bg-gray-300'\n                      }`}\n                    >\n                      <div\n                        className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                          enabled ? 'translate-x-6' : 'translate-x-0'\n                        }`}\n                      />\n                    </button>\n                  </div>\n                ))}\n                \n                {/* 실시간 통계 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">실시간 통계</span>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableRealTimeStats: !prev.enableRealTimeStats }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableRealTimeStats ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableRealTimeStats ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'performance':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <Activity className=\"h-5 w-5 mr-2\" />\n                성능 설정\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* GPU 가속 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Zap className=\"h-4 w-4\" />\n                    <span className=\"text-gray-900 dark:text-white\">GPU 가속</span>\n                  </div>\n                  <button\n                    onClick={handleGPUAccelerationToggle}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableGPUAcceleration ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableGPUAcceleration ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 메모리 최적화 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Activity className=\"h-4 w-4\" />\n                    <span className=\"text-gray-900 dark:text-white\">메모리 최적화</span>\n                  </div>\n                  <button\n                    onClick={handleMemoryOptimization}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableMemoryOptimization ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableMemoryOptimization ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 처리 모드 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">처리 모드</label>\n                  <select\n                    value={localSettings.processingMode}\n                    onChange={(e) => handleProcessingModeChange(e.target.value as SettingsState['processingMode'])}\n                    className=\"w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value=\"auto\">자동</option>\n                    <option value=\"normal\">일반</option>\n                    <option value=\"cpuIntensive\">CPU 집약적</option>\n                    <option value=\"gpuIntensive\">GPU 집약적</option>\n                  </select>\n                </div>\n\n                {/* 메모리 임계값 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    최대 메모리 임계값: {localSettings.maxMemoryThreshold}MB\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"50\"\n                    max=\"500\"\n                    step=\"10\"\n                    value={localSettings.maxMemoryThreshold}\n                    onChange={(e) => setLocalSettings(prev => ({ ...prev, maxMemoryThreshold: parseInt(e.target.value) }))}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 시스템 모니터링 섹션 */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <Monitor className=\"h-5 w-5 mr-2\" />\n                시스템 모니터링\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <HardDrive className=\"h-4 w-4 mr-2\" />\n                    메모리 모니터\n                  </h4>\n                  <MemoryMonitor />\n                </div>\n                \n                <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <Gauge className=\"h-4 w-4 mr-2\" />\n                    활성 상태\n                  </h4>\n                  <ActivityMonitor />\n                </div>\n                \n                <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 md:col-span-2\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <Database className=\"h-4 w-4 mr-2\" />\n                    시스템 정보\n                  </h4>\n                  <NativeModuleStatus />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'typing':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <BarChart3 className=\"h-5 w-5 mr-2\" />\n                타이핑 분석 설정\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* 분석 활성화 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">타이핑 분석 활성화</span>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableTypingAnalysis: !prev.enableTypingAnalysis }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableTypingAnalysis ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableTypingAnalysis ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 실시간 분석 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">실시간 분석</span>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableRealTimeAnalysis: !prev.enableRealTimeAnalysis }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableRealTimeAnalysis ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableRealTimeAnalysis ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 통계 수집 주기 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    통계 수집 주기: {localSettings.statsCollectionInterval}초\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"1\"\n                    max=\"60\"\n                    step=\"1\"\n                    value={localSettings.statsCollectionInterval}\n                    onChange={(e) => setLocalSettings(prev => ({ ...prev, statsCollectionInterval: parseInt(e.target.value) }))}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                {/* 키보드 레이아웃 감지 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">키보드 레이아웃 자동 감지</span>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableKeyboardDetection: !prev.enableKeyboardDetection }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableKeyboardDetection ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableKeyboardDetection ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 타이핑 패턴 학습 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">타이핑 패턴 학습</span>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enablePatternLearning: !prev.enablePatternLearning }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enablePatternLearning ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enablePatternLearning ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'performance':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <Activity className=\"h-5 w-5 mr-2\" />\n                성능 설정\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* GPU 가속 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-gray-900 dark:text-white\">GPU 가속</span>\n                    <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      변경 시 애플리케이션이 재시작됩니다\n                    </span>\n                  </div>\n                  <button\n                    onClick={handleGPUAccelerationToggle}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableGPUAcceleration ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableGPUAcceleration ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 메모리 최적화 */}\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-900 dark:text-white\">메모리 최적화</span>\n                  <button\n                    onClick={handleMemoryOptimization}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableMemoryOptimization ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableMemoryOptimization ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 처리 모드 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">처리 모드</label>\n                  <div className=\"space-y-2\">\n                    {[\n                      { value: 'balanced', label: '균형 모드', description: '성능과 전력 소비의 균형' },\n                      { value: 'performance', label: '성능 우선', description: '최대 성능 모드' },\n                      { value: 'powerSaver', label: '절전 모드', description: '최소 전력 소비' },\n                      { value: 'gpu-intensive', label: 'GPU 집약적', description: 'GPU 활용 최대화 (재시작 필요)' },\n                      { value: 'cpu-intensive', label: 'CPU 집약적', description: 'CPU 활용 최대화 (재시작 필요)' }\n                    ].map((mode) => (\n                      <button\n                        key={mode.value}\n                        onClick={() => handleProcessingModeChange(mode.value as SettingsState['processingMode'])}\n                        className={`w-full flex flex-col items-start space-y-1 px-4 py-3 rounded-lg border transition-colors ${\n                          localSettings.processingMode === mode.value\n                            ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-700 text-blue-700 dark:text-blue-300'\n                            : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                        }`}\n                      >\n                        <span className=\"font-medium\">{mode.label}</span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">{mode.description}</span>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* 메모리 임계값 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    메모리 임계값: {localSettings.maxMemoryThreshold}MB\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"50\"\n                    max=\"500\"\n                    step=\"10\"\n                    value={localSettings.maxMemoryThreshold}\n                    onChange={(e) => setLocalSettings(prev => ({ ...prev, maxMemoryThreshold: parseInt(e.target.value) }))}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* 시스템 모니터링 섹션 */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <Monitor className=\"h-5 w-5 mr-2\" />\n                시스템 모니터링\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <HardDrive className=\"h-4 w-4 mr-2\" />\n                    메모리 모니터\n                  </h4>\n                  <MemoryMonitor />\n                </div>\n                \n                <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <Gauge className=\"h-4 w-4 mr-2\" />\n                    활성 상태\n                  </h4>\n                  <ActivityMonitor />\n                </div>\n                \n                <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 md:col-span-2\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n                    <Database className=\"h-4 w-4 mr-2\" />\n                    시스템 정보\n                  </h4>\n                  <NativeModuleStatus />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'data':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center\">\n                <Shield className=\"h-5 w-5 mr-2\" />\n                데이터 및 개인정보\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {/* 데이터 수집 허용 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-gray-900 dark:text-white\">데이터 수집 허용</span>\n                    <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      앱 개선을 위한 익명 사용 데이터 수집\n                    </span>\n                  </div>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableDataCollection: !prev.enableDataCollection }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableDataCollection ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableDataCollection ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 자동 저장 */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex flex-col\">\n                    <span className=\"text-gray-900 dark:text-white\">자동 저장</span>\n                    <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      설정 변경 시 자동으로 저장\n                    </span>\n                  </div>\n                  <button\n                    onClick={() => setLocalSettings(prev => ({ ...prev, enableAutoSave: !prev.enableAutoSave }))}\n                    className={`w-12 h-6 rounded-full p-1 transition-colors ${\n                      localSettings.enableAutoSave ? 'bg-blue-600' : 'bg-gray-300'\n                    }`}\n                  >\n                    <div\n                      className={`w-4 h-4 rounded-full bg-white transition-transform ${\n                        localSettings.enableAutoSave ? 'translate-x-6' : 'translate-x-0'\n                      }`}\n                    />\n                  </button>\n                </div>\n\n                {/* 데이터 보관 기간 */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    데이터 보관 기간: {localSettings.dataRetentionDays}일\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"7\"\n                    max=\"365\"\n                    step=\"7\"\n                    value={localSettings.dataRetentionDays}\n                    onChange={(e) => setLocalSettings(prev => ({ ...prev, dataRetentionDays: parseInt(e.target.value) }))}\n                    className=\"w-full\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n                    <span>7일</span>\n                    <span>1년</span>\n                  </div>\n                </div>\n\n                {/* 데이터 내보내기/삭제 버튼 */}\n                <div className=\"pt-4 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"space-y-3\">\n                    <button\n                      onClick={() => {\n                        // 데이터 내보내기 로직 (향후 구현)\n                        console.log('데이터 내보내기 요청');\n                      }}\n                      className=\"w-full flex items-center justify-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                    >\n                      <Database className=\"h-4 w-4\" />\n                      데이터 내보내기\n                    </button>\n                    \n                    <button\n                      onClick={() => {\n                        const confirmed = window.confirm(\n                          '모든 저장된 데이터를 삭제하시겠습니까?\\n\\n이 작업은 되돌릴 수 없습니다.'\n                        );\n                        if (confirmed) {\n                          // 데이터 삭제 로직 (향후 구현)\n                          console.log('데이터 삭제 요청');\n                        }\n                      }}\n                      className=\"w-full flex items-center justify-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n                    >\n                      <Shield className=\"h-4 w-4\" />\n                      모든 데이터 삭제\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n\n      default:\n        return <div>카테고리를 선택해주세요.</div>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-gray-100 dark:bg-gray-950\">\n      {/* 좌측 카테고리 네비게이션 */}\n      <div className=\"w-64 bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 flex flex-col\">\n        <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n            <SettingsIcon className=\"h-5 w-5 mr-2\" />\n            설정\n          </h2>\n        </div>\n        \n        <nav className=\"flex-1 p-4\">\n          <ul className=\"space-y-2\">\n            {settingCategories.map((category) => (\n              <li key={category.id}>\n                <button\n                  onClick={() => setActiveCategory(category.id)}\n                  className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-colors ${\n                    activeCategory === category.id\n                      ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400'\n                      : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800'\n                  }`}\n                >\n                  <category.icon className=\"w-5 h-5 flex-shrink-0\" />\n                  <span className=\"text-sm font-medium\">{category.label}</span>\n                </button>\n              </li>\n            ))}\n          </ul>\n        </nav>\n\n        {/* 저장/초기화 버튼 */}\n        <div className=\"p-4 border-t border-gray-200 dark:border-gray-700 space-y-2\">\n          <button\n            onClick={handleSave}\n            className=\"w-full flex items-center justify-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <Save className=\"h-4 w-4\" />\n            저장\n          </button>\n          \n          <button\n            onClick={handleReset}\n            className=\"w-full flex items-center justify-center gap-2 px-4 py-2 text-gray-600 dark:text-gray-400 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n          >\n            <RotateCcw className=\"h-4 w-4\" />\n            초기화\n          </button>\n        </div>\n      </div>\n\n      {/* 우측 콘텐츠 영역 */}\n      <div className=\"flex-1 overflow-auto p-6\">\n        {renderCategoryContent()}\n      </div>\n\n      {/* 저장 확인 메시지 */}\n      {showSaveConfirm && (\n        <div className=\"fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50\">\n          설정이 저장되었습니다!\n        </div>\n      )}\n\n      {/* 재시작 다이얼로그 */}\n      <Restart\n        isVisible={showRestartDialog}\n        reason={restartReason}\n        onRestart={() => {\n          console.log('🔄 애플리케이션 재시작 요청');\n          setShowRestartDialog(false);\n        }}\n        onClose={() => {\n          setShowRestartDialog(false);\n          setNeedsRestart(true); // 재시작 필요 알림은 유지\n        }}\n      />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AACA;AACA;AACA;AACA;AACA;;;AA7BA;;;;;;;;;AAkCA,aAAa;AACb,MAAM,oBAAoB;IACxB;QAAE,IAAI;QAA8B,OAAO;QAAS,MAAM,qMAAA,CAAA,OAAI;IAAC;IAC/D;QAAE,IAAI;QAA6B,OAAO;QAAU,MAAM,qNAAA,CAAA,YAAS;IAAC;IACpE;QAAE,IAAI;QAAkC,OAAO;QAAS,MAAM,6MAAA,CAAA,WAAQ;IAAC;IACvE;QAAE,IAAI;QAA2B,OAAO;QAAc,MAAM,yMAAA,CAAA,SAAM;IAAC;CACpE;AAOM,SAAS,SAAS,EAAE,MAAM,EAAE,eAAe,EAAiB;;IACjE,MAAM,EACJ,QAAQ,EACR,SAAS,EACT,KAAK,EACL,YAAY,EACZ,aAAa,EACd,GAAG,CAAA,GAAA,8HAAA,CAAA,cAAW,AAAD;IAEd,MAAM,EACJ,KAAK,EACL,UAAU,EACV,gBAAgB,mBAAmB,EACnC,WAAW,EACX,QAAQ,EACT,GAAG,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD;IAEX,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACjD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvD,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3D,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAmB;IAEtE,uBAAuB;IACvB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,iBAAiB;QACnB;6BAAG;QAAC;KAAS;IAEb,qBAAqB;IACrB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;8BAAE;YACR,IAAI,iBAAiB;gBACnB,iBAAiB;YACnB;QACF;6BAAG;QAAC;KAAgB;IAEpB,4BAA4B;IAC5B,MAAM,8BAA8B;QAClC,MAAM,WAAW,CAAC,cAAc,qBAAqB;QAErD,eAAe;QACf,MAAM,aAAa,WAAW,QAAQ;QACtC,MAAM,gBAAgB,OAAO,OAAO,CAClC,CAAC,QAAQ,EAAE,WAAW,WAAW,CAAC,GAClC,CAAC,4BAA4B,CAAC,GAC9B,CAAC,SAAS,CAAC;QAGb,IAAI,CAAC,eAAe;YAClB,QAAQ,yBAAyB;QACnC;QAEA,iBAAiB,CAAA,OAAQ,CAAC;gBAAE,GAAG,IAAI;gBAAE,uBAAuB;YAAS,CAAC;QAEtE,8BAA8B;QAC9B,IAAI;YACF,IAAI,OAAO,WAAW,EAAE;gBACtB,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,MAAM,CAAC,sBAAsB;gBACrE,IAAI,OAAO,OAAO,EAAE;oBAClB,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,WAAW,QAAQ,QAAQ;oBAClD,IAAI,OAAO,eAAe,EAAE;wBAC1B,iBAAiB,CAAC,OAAO,EAAE,YAAY;wBACvC,qBAAqB;wBACrB,gBAAgB;oBAClB;gBACF;YACF;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iBAAiB;YAC/B,gBAAgB;YAChB,iBAAiB,CAAA,OAAQ,CAAC;oBAAE,GAAG,IAAI;oBAAE,uBAAuB,CAAC;gBAAS,CAAC;QACzE;IACF;IAEA,MAAM,6BAA6B,OAAO;QACxC,MAAM,cAAc,cAAc,cAAc;QAEhD,2BAA2B;QAC3B,IAAI,gBAAgB,MAAM;YACxB;QACF;QAEA,mBAAmB;QACnB,MAAM,kBAAkB,SAAS,mBAAmB,SAAS;QAE7D,IAAI,iBAAiB;YACnB,MAAM,WAAW,SAAS,kBAAkB,eAAe;YAC3D,MAAM,gBAAgB,OAAO,OAAO,CAClC,CAAC,QAAQ,EAAE,SAAS,gBAAgB,CAAC,GACrC,CAAC,4BAA4B,CAAC,GAC9B,CAAC,SAAS,CAAC;YAGb,IAAI,CAAC,eAAe;gBAClB,QAAQ,yBAAyB;YACnC;QACF;QAEA,iBAAiB,CAAC,OAAwB,CAAC;gBAAE,GAAG,IAAI;gBAAE,gBAAgB;YAAK,CAAC;QAE5E,IAAI,iBAAiB;YACnB,MAAM,WAAW,SAAS,kBAAkB,eAAe;YAC3D,iBAAiB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YACzC,qBAAqB;YACrB,gBAAgB;QAClB;QAEA,kBAAkB;QAClB,IAAI;YACF,IAAI,OAAO,WAAW,EAAE;gBACtB,0BAA0B;gBAC1B,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,MAAM;YACjC;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gBAAgB;YAC9B,gBAAgB;YAChB,iBAAiB,CAAC,OAAwB,CAAC;oBAAE,GAAG,IAAI;oBAAE,gBAAgB;gBAAY,CAAC;QACrF;IACF;IAEA,MAAM,yBAAyB,OAAO;QACpC,iBAAiB,CAAC,OAAwB,CAAC;gBAAE,GAAG,IAAI;gBAAE,YAAY;YAAK,CAAC;QAExE,8BAA8B;QAC9B,IAAI;YACF,MAAM,kBAAkB;gBAAE,GAAG,aAAa;gBAAE,YAAY;YAAK;YAC7D,MAAM,aAAa;YACnB,QAAQ,GAAG,CAAC,CAAC,WAAW,EAAE,MAAM;QAClC,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,iBAAiB;QACjC;IACF;IAEA,MAAM,2BAA2B;QAC/B,MAAM,WAAW,CAAC,cAAc,wBAAwB;QACxD,iBAAiB,CAAA,OAAQ,CAAC;gBAAE,GAAG,IAAI;gBAAE,0BAA0B;YAAS,CAAC;QAEzE,2BAA2B;QAC3B,IAAI,UAAU;YACZ,IAAI;gBACF,IAAI,OAAO,WAAW,EAAE,QAAQ,UAAU;oBACxC,MAAM,SAAS,MAAM,OAAO,WAAW,CAAC,MAAM,CAAC,QAAQ;oBACvD,QAAQ,GAAG,CAAC,eAAe;oBAC3B,aAAa;oBACb,mBAAmB;oBACnB,WAAW,IAAM,mBAAmB,QAAQ;gBAC9C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,eAAe;YAC/B;QACF;IACF;IAEA,MAAM,aAAa;QACjB,IAAI;YACF,MAAM,aAAa;YACnB,mBAAmB;YACnB,WAAW,IAAM,mBAAmB,QAAQ;YAC5C,SAAS;QACX,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,aAAa;QAC7B;IACF;IAEA,MAAM,cAAc;QAClB,IAAI;YACF,MAAM;YACN,iBAAiB;YACjB,gBAAgB;QAClB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,cAAc;QAC9B;IACF;IAEA,MAAM,iBAAiB;QACrB,QAAQ,GAAG,CAAC;QACZ,MAAM;IACR;IAEA,gBAAgB;IAChB,MAAM,wBAAwB;QAC5B,OAAQ;YACN,KAAK;gBACH,qBACE,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,qMAAA,CAAA,OAAI;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAInC,6LAAC;gCAAI,WAAU;;kDAEb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDAAI,WAAU;;wDACZ,2BAAa,6LAAC,qMAAA,CAAA,OAAI;4DAAC,WAAU;;;;;iFAAe,6LAAC,mMAAA,CAAA,MAAG;4DAAC,WAAU;;;;;;sEAC5D,6LAAC;;gEAAK;gEAAQ;gEAAM;;;;;;;;;;;;;;;;;;0DAGxB,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC;oDACC,SAAS;oDACT,WAAW,CAAC,cAAc,EAAE,aAAa,WAAW,IAAI;oDACxD,MAAK;oDACL,gBAAc;oDACd,cAAW;8DAEX,cAAA,6LAAC;wDAAI,WAAU;;;;;;;;;;;;;;;;;;;;;;kDAMrB,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAM,WAAU;0DAAuD;;;;;;0DACxE,6LAAC;gDAAI,WAAU;0DACZ;oDACC;wDAAE,OAAO;wDAAY,OAAO;wDAAQ,MAAM,mNAAA,CAAA,YAAS;oDAAC;oDACpD;wDAAE,OAAO;wDAAc,OAAO;wDAAS,MAAM,mNAAA,CAAA,YAAS;oDAAC;oDACvD;wDAAE,OAAO;wDAAsB,OAAO;wDAAiB,MAAM,mMAAA,CAAA,MAAG;oDAAC;iDAClE,CAAC,GAAG,CAAC,CAAC,qBACL,6LAAC;wDAEC,SAAS,IAAM,uBAAuB,KAAK,KAAK;wDAChD,WAAW,CAAC,iFAAiF,EAC3F,cAAc,UAAU,KAAK,KAAK,KAAK,GACnC,yGACA,2IACJ;;0EAEF,6LAAC,KAAK,IAAI;gEAAC,WAAU;;;;;;0EACrB,6LAAC;0EAAM,KAAK,KAAK;;;;;;;uDATZ,KAAK,KAAK;;;;;;;;;;;;;;;;kDAgBvB,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgC;;;;;;0DAChD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,kBAAkB,CAAC,KAAK,gBAAgB;wDAAC,CAAC;gDAC9F,WAAW,CAAC,sEAAsE,EAChF,cAAc,gBAAgB,GAAG,gBAAgB,eACjD;gDACF,cAAW;0DAEX,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,gBAAgB,GAAG,kBAAkB,iBACnD;;;;;;;;;;;;;;;;;kDAMR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;;kEACb,6LAAC,qMAAA,CAAA,OAAI;wDAAC,WAAU;;;;;;kEAChB,6LAAC;wDAAK,WAAU;kEAAgC;;;;;;;;;;;;0DAElD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,qBAAqB,CAAC,KAAK,mBAAmB;wDAAC,CAAC;gDACpG,WAAW,CAAC,sEAAsE,EAChF,cAAc,mBAAmB,GAAG,gBAAgB,eACpD;gDACF,cAAW;0DAEX,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,mBAAmB,GAAG,kBAAkB,iBACtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASlB,KAAK;gBACH,qBACE,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,qNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAIxC,6LAAC;gCAAI,WAAU;;oCAEZ,OAAO,OAAO,CAAC,cAAc,iBAAiB,EAAE,GAAG,CAAC,CAAC,CAAC,UAAU,QAAQ,iBACvE,6LAAC;4CAAmB,WAAU;;8DAC5B,6LAAC;oDAAK,WAAU;8DAA4C;;;;;;8DAC5D,6LAAC;oDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;gEACvC,GAAG,IAAI;gEACP,mBAAmB;oEACjB,GAAG,KAAK,iBAAiB;oEACzB,CAAC,SAAS,EAAE,CAAC;gEACf;4DACF,CAAC;oDACD,WAAW,CAAC,4CAA4C,EACtD,UAAU,gBAAgB,eAC1B;8DAEF,cAAA,6LAAC;wDACC,WAAW,CAAC,mDAAmD,EAC7D,UAAU,kBAAkB,iBAC5B;;;;;;;;;;;;2CAjBE;;;;;kDAwBZ,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgC;;;;;;0DAChD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,qBAAqB,CAAC,KAAK,mBAAmB;wDAAC,CAAC;gDACpG,WAAW,CAAC,4CAA4C,EACtD,cAAc,mBAAmB,GAAG,gBAAgB,eACpD;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,mBAAmB,GAAG,kBAAkB,iBACtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASlB,KAAK;gBACH,qBACE,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;;sDACZ,6LAAC,6MAAA,CAAA,WAAQ;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;8CAIvC,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;;sEACb,6LAAC,mMAAA,CAAA,MAAG;4DAAC,WAAU;;;;;;sEACf,6LAAC;4DAAK,WAAU;sEAAgC;;;;;;;;;;;;8DAElD,6LAAC;oDACC,SAAS;oDACT,WAAW,CAAC,4CAA4C,EACtD,cAAc,qBAAqB,GAAG,gBAAgB,eACtD;8DAEF,cAAA,6LAAC;wDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,qBAAqB,GAAG,kBAAkB,iBACxD;;;;;;;;;;;;;;;;;sDAMR,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;;sEACb,6LAAC,6MAAA,CAAA,WAAQ;4DAAC,WAAU;;;;;;sEACpB,6LAAC;4DAAK,WAAU;sEAAgC;;;;;;;;;;;;8DAElD,6LAAC;oDACC,SAAS;oDACT,WAAW,CAAC,4CAA4C,EACtD,cAAc,wBAAwB,GAAG,gBAAgB,eACzD;8DAEF,cAAA,6LAAC;wDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,wBAAwB,GAAG,kBAAkB,iBAC3D;;;;;;;;;;;;;;;;;sDAMR,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DAAuD;;;;;;8DACxE,6LAAC;oDACC,OAAO,cAAc,cAAc;oDACnC,UAAU,CAAC,IAAM,2BAA2B,EAAE,MAAM,CAAC,KAAK;oDAC1D,WAAU;;sEAEV,6LAAC;4DAAO,OAAM;sEAAO;;;;;;sEACrB,6LAAC;4DAAO,OAAM;sEAAS;;;;;;sEACvB,6LAAC;4DAAO,OAAM;sEAAe;;;;;;sEAC7B,6LAAC;4DAAO,OAAM;sEAAe;;;;;;;;;;;;;;;;;;sDAKjC,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;;wDAAuD;wDACzD,cAAc,kBAAkB;wDAAC;;;;;;;8DAEhD,6LAAC;oDACC,MAAK;oDACL,KAAI;oDACJ,KAAI;oDACJ,MAAK;oDACL,OAAO,cAAc,kBAAkB;oDACvC,UAAU,CAAC,IAAM,iBAAiB,CAAA,OAAQ,CAAC;gEAAE,GAAG,IAAI;gEAAE,oBAAoB,SAAS,EAAE,MAAM,CAAC,KAAK;4DAAE,CAAC;oDACpG,WAAU;;;;;;;;;;;;;;;;;;;;;;;;sCAOlB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;;sDACZ,6LAAC,2MAAA,CAAA,UAAO;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;8CAItC,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;;sEACZ,6LAAC,mNAAA,CAAA,YAAS;4DAAC,WAAU;;;;;;wDAAiB;;;;;;;8DAGxC,6LAAC,uJAAA,CAAA,UAAa;;;;;;;;;;;sDAGhB,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;;sEACZ,6LAAC,uMAAA,CAAA,QAAK;4DAAC,WAAU;;;;;;wDAAiB;;;;;;;8DAGpC,6LAAC,yJAAA,CAAA,UAAe;;;;;;;;;;;sDAGlB,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;;sEACZ,6LAAC,6MAAA,CAAA,WAAQ;4DAAC,WAAU;;;;;;wDAAiB;;;;;;;8DAGvC,6LAAC,gKAAA,CAAA,UAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAO/B,KAAK;gBACH,qBACE,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,qNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAIxC,6LAAC;gCAAI,WAAU;;kDAEb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgC;;;;;;0DAChD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,sBAAsB,CAAC,KAAK,oBAAoB;wDAAC,CAAC;gDACtG,WAAW,CAAC,4CAA4C,EACtD,cAAc,oBAAoB,GAAG,gBAAgB,eACrD;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,oBAAoB,GAAG,kBAAkB,iBACvD;;;;;;;;;;;;;;;;;kDAMR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgC;;;;;;0DAChD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,wBAAwB,CAAC,KAAK,sBAAsB;wDAAC,CAAC;gDAC1G,WAAW,CAAC,4CAA4C,EACtD,cAAc,sBAAsB,GAAG,gBAAgB,eACvD;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,sBAAsB,GAAG,kBAAkB,iBACzD;;;;;;;;;;;;;;;;;kDAMR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAM,WAAU;;oDAAuD;oDAC3D,cAAc,uBAAuB;oDAAC;;;;;;;0DAEnD,6LAAC;gDACC,MAAK;gDACL,KAAI;gDACJ,KAAI;gDACJ,MAAK;gDACL,OAAO,cAAc,uBAAuB;gDAC5C,UAAU,CAAC,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,yBAAyB,SAAS,EAAE,MAAM,CAAC,KAAK;wDAAE,CAAC;gDACzG,WAAU;;;;;;;;;;;;kDAKd,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgC;;;;;;0DAChD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,yBAAyB,CAAC,KAAK,uBAAuB;wDAAC,CAAC;gDAC5G,WAAW,CAAC,4CAA4C,EACtD,cAAc,uBAAuB,GAAG,gBAAgB,eACxD;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,uBAAuB,GAAG,kBAAkB,iBAC1D;;;;;;;;;;;;;;;;;kDAMR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAK,WAAU;0DAAgC;;;;;;0DAChD,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,uBAAuB,CAAC,KAAK,qBAAqB;wDAAC,CAAC;gDACxG,WAAW,CAAC,4CAA4C,EACtD,cAAc,qBAAqB,GAAG,gBAAgB,eACtD;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,qBAAqB,GAAG,kBAAkB,iBACxD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASlB,KAAK;gBACH,qBACE,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;;sDACZ,6LAAC,6MAAA,CAAA,WAAQ;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;8CAIvC,6LAAC;oCAAI,WAAU;;sDAEb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAK,WAAU;sEAAgC;;;;;;sEAChD,6LAAC;4DAAK,WAAU;sEAA2C;;;;;;;;;;;;8DAI7D,6LAAC;oDACC,SAAS;oDACT,WAAW,CAAC,4CAA4C,EACtD,cAAc,qBAAqB,GAAG,gBAAgB,eACtD;8DAEF,cAAA,6LAAC;wDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,qBAAqB,GAAG,kBAAkB,iBACxD;;;;;;;;;;;;;;;;;sDAMR,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAK,WAAU;8DAAgC;;;;;;8DAChD,6LAAC;oDACC,SAAS;oDACT,WAAW,CAAC,4CAA4C,EACtD,cAAc,wBAAwB,GAAG,gBAAgB,eACzD;8DAEF,cAAA,6LAAC;wDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,wBAAwB,GAAG,kBAAkB,iBAC3D;;;;;;;;;;;;;;;;;sDAMR,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;8DAAuD;;;;;;8DACxE,6LAAC;oDAAI,WAAU;8DACZ;wDACC;4DAAE,OAAO;4DAAY,OAAO;4DAAS,aAAa;wDAAgB;wDAClE;4DAAE,OAAO;4DAAe,OAAO;4DAAS,aAAa;wDAAW;wDAChE;4DAAE,OAAO;4DAAc,OAAO;4DAAS,aAAa;wDAAW;wDAC/D;4DAAE,OAAO;4DAAiB,OAAO;4DAAW,aAAa;wDAAsB;wDAC/E;4DAAE,OAAO;4DAAiB,OAAO;4DAAW,aAAa;wDAAsB;qDAChF,CAAC,GAAG,CAAC,CAAC,qBACL,6LAAC;4DAEC,SAAS,IAAM,2BAA2B,KAAK,KAAK;4DACpD,WAAW,CAAC,yFAAyF,EACnG,cAAc,cAAc,KAAK,KAAK,KAAK,GACvC,yGACA,2IACJ;;8EAEF,6LAAC;oEAAK,WAAU;8EAAe,KAAK,KAAK;;;;;;8EACzC,6LAAC;oEAAK,WAAU;8EAA4C,KAAK,WAAW;;;;;;;2DATvE,KAAK,KAAK;;;;;;;;;;;;;;;;sDAgBvB,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAM,WAAU;;wDAAuD;wDAC5D,cAAc,kBAAkB;wDAAC;;;;;;;8DAE7C,6LAAC;oDACC,MAAK;oDACL,KAAI;oDACJ,KAAI;oDACJ,MAAK;oDACL,OAAO,cAAc,kBAAkB;oDACvC,UAAU,CAAC,IAAM,iBAAiB,CAAA,OAAQ,CAAC;gEAAE,GAAG,IAAI;gEAAE,oBAAoB,SAAS,EAAE,MAAM,CAAC,KAAK;4DAAE,CAAC;oDACpG,WAAU;;;;;;;;;;;;;;;;;;;;;;;;sCAOlB,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAG,WAAU;;sDACZ,6LAAC,2MAAA,CAAA,UAAO;4CAAC,WAAU;;;;;;wCAAiB;;;;;;;8CAItC,6LAAC;oCAAI,WAAU;;sDACb,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;;sEACZ,6LAAC,mNAAA,CAAA,YAAS;4DAAC,WAAU;;;;;;wDAAiB;;;;;;;8DAGxC,6LAAC,uJAAA,CAAA,UAAa;;;;;;;;;;;sDAGhB,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;;sEACZ,6LAAC,uMAAA,CAAA,QAAK;4DAAC,WAAU;;;;;;wDAAiB;;;;;;;8DAGpC,6LAAC,yJAAA,CAAA,UAAe;;;;;;;;;;;sDAGlB,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDAAG,WAAU;;sEACZ,6LAAC,6MAAA,CAAA,WAAQ;4DAAC,WAAU;;;;;;wDAAiB;;;;;;;8DAGvC,6LAAC,gKAAA,CAAA,UAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAO/B,KAAK;gBACH,qBACE,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;;kDACZ,6LAAC,yMAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAIrC,6LAAC;gCAAI,WAAU;;kDAEb,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAK,WAAU;kEAAgC;;;;;;kEAChD,6LAAC;wDAAK,WAAU;kEAA2C;;;;;;;;;;;;0DAI7D,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,sBAAsB,CAAC,KAAK,oBAAoB;wDAAC,CAAC;gDACtG,WAAW,CAAC,4CAA4C,EACtD,cAAc,oBAAoB,GAAG,gBAAgB,eACrD;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,oBAAoB,GAAG,kBAAkB,iBACvD;;;;;;;;;;;;;;;;;kDAMR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAK,WAAU;kEAAgC;;;;;;kEAChD,6LAAC;wDAAK,WAAU;kEAA2C;;;;;;;;;;;;0DAI7D,6LAAC;gDACC,SAAS,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,gBAAgB,CAAC,KAAK,cAAc;wDAAC,CAAC;gDAC1F,WAAW,CAAC,4CAA4C,EACtD,cAAc,cAAc,GAAG,gBAAgB,eAC/C;0DAEF,cAAA,6LAAC;oDACC,WAAW,CAAC,mDAAmD,EAC7D,cAAc,cAAc,GAAG,kBAAkB,iBACjD;;;;;;;;;;;;;;;;;kDAMR,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAM,WAAU;;oDAAuD;oDAC1D,cAAc,iBAAiB;oDAAC;;;;;;;0DAE9C,6LAAC;gDACC,MAAK;gDACL,KAAI;gDACJ,KAAI;gDACJ,MAAK;gDACL,OAAO,cAAc,iBAAiB;gDACtC,UAAU,CAAC,IAAM,iBAAiB,CAAA,OAAQ,CAAC;4DAAE,GAAG,IAAI;4DAAE,mBAAmB,SAAS,EAAE,MAAM,CAAC,KAAK;wDAAE,CAAC;gDACnG,WAAU;;;;;;0DAEZ,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;kEAAK;;;;;;kEACN,6LAAC;kEAAK;;;;;;;;;;;;;;;;;;kDAKV,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC;4CAAI,WAAU;;8DACb,6LAAC;oDACC,SAAS;wDACP,sBAAsB;wDACtB,QAAQ,GAAG,CAAC;oDACd;oDACA,WAAU;;sEAEV,6LAAC,6MAAA,CAAA,WAAQ;4DAAC,WAAU;;;;;;wDAAY;;;;;;;8DAIlC,6LAAC;oDACC,SAAS;wDACP,MAAM,YAAY,OAAO,OAAO,CAC9B;wDAEF,IAAI,WAAW;4DACb,oBAAoB;4DACpB,QAAQ,GAAG,CAAC;wDACd;oDACF;oDACA,WAAU;;sEAEV,6LAAC,yMAAA,CAAA,SAAM;4DAAC,WAAU;;;;;;wDAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAU9C;gBACE,qBAAO,6LAAC;8BAAI;;;;;;QAChB;IACF;IAEA,IAAI,WAAW;QACb,qBACE,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;;;;;;;;;;IAGrB;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BAEb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAG,WAAU;;8CACZ,6LAAC,6MAAA,CAAA,WAAY;oCAAC,WAAU;;;;;;gCAAiB;;;;;;;;;;;;kCAK7C,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAG,WAAU;sCACX,kBAAkB,GAAG,CAAC,CAAC,yBACtB,6LAAC;8CACC,cAAA,6LAAC;wCACC,SAAS,IAAM,kBAAkB,SAAS,EAAE;wCAC5C,WAAW,CAAC,sEAAsE,EAChF,mBAAmB,SAAS,EAAE,GAC1B,oEACA,6EACJ;;0DAEF,6LAAC,SAAS,IAAI;gDAAC,WAAU;;;;;;0DACzB,6LAAC;gDAAK,WAAU;0DAAuB,SAAS,KAAK;;;;;;;;;;;;mCAVhD,SAAS,EAAE;;;;;;;;;;;;;;;kCAkB1B,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCACC,SAAS;gCACT,WAAU;;kDAEV,6LAAC,qMAAA,CAAA,OAAI;wCAAC,WAAU;;;;;;oCAAY;;;;;;;0CAI9B,6LAAC;gCACC,SAAS;gCACT,WAAU;;kDAEV,6LAAC,mNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;oCAAY;;;;;;;;;;;;;;;;;;;0BAOvC,6LAAC;gBAAI,WAAU;0BACZ;;;;;;YAIF,iCACC,6LAAC;gBAAI,WAAU;0BAAkF;;;;;;0BAMnG,6LAAC,6IAAA,CAAA,UAAO;gBACN,WAAW;gBACX,QAAQ;gBACR,WAAW;oBACT,QAAQ,GAAG,CAAC;oBACZ,qBAAqB;gBACvB;gBACA,SAAS;oBACP,qBAAqB;oBACrB,gBAAgB,OAAO,gBAAgB;gBACzC;;;;;;;;;;;;AAIR;GAr3BgB;;QAOV,8HAAA,CAAA,cAAW;QAQX,mJAAA,CAAA,WAAQ;;;KAfE","debugId":null}},
    {"offset": {"line": 7289, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/utils/init-styles.ts"],"sourcesContent":["// Loop 앱 CSS 변수 초기화 및 스타일 강제 적용\nconst initStyles = () => {\n  // CSS 변수가 적용되었는지 확인하되, ThemeProvider가 관리하는 테마는 건드리지 않음\n  let style = document.getElementById('loop-init-styles');\n  \n  // 이미 스타일이 있으면 제거하지 않고 업데이트만 함\n  if (!style) {\n    style = document.createElement('style');\n    style.id = 'loop-init-styles';\n    document.head.appendChild(style);\n  }\n  \n  style.textContent = `\n    /* Loop 앱 기본 CSS 변수 - ThemeProvider보다 낮은 우선순위 */\n    :root {\n      --background-color: #f9f9f9;\n      --text-color: #333;\n      --primary-color: #0070f3;\n      --text-secondary: #666;\n      --border-color: #e0e0e0;\n      --card-bg: #ffffff;\n      --header-bg: #ffffff;\n      --footer-bg: #f0f0f0;\n    }\n    \n    /* 다크모드 변수 정의 - ThemeProvider가 .dark 클래스를 추가하면 적용됨 */\n    .dark, .dark-mode, [data-theme=\"dark\"] {\n      --background-color: #121212 !important;\n      --text-color: #e0e0e0 !important;\n      --text-secondary: #a0a0a0 !important;\n      --border-color: #333 !important;\n      --card-bg: #1e1e1e !important;\n      --header-bg: #1e1e1e !important;\n      --footer-bg: #121212 !important;\n    }\n    \n    /* body에 CSS 변수 적용 - transition 포함 */\n    body {\n      background-color: var(--background-color) !important;\n      color: var(--text-color) !important;\n      transition: background-color 0.3s ease, color 0.3s ease;\n    }\n    \n    /* 카드 및 주요 컴포넌트도 변수 사용 */\n    .bg-white, .bg-card {\n      background-color: var(--card-bg) !important;\n    }\n    \n    .text-gray-900, .text-black {\n      color: var(--text-color) !important;\n    }\n    \n    .text-gray-600, .text-gray-500 {\n      color: var(--text-secondary) !important;\n    }\n  `;\n  \n  // 기본 폰트 로드\n  if (!document.getElementById('loop-fonts')) {\n    const fontLink = document.createElement('link');\n    fontLink.id = 'loop-fonts';\n    fontLink.rel = 'stylesheet';\n    fontLink.href = '/assets/fonts/font.css';\n    document.head.appendChild(fontLink);\n  }\n  \n  // 전자문서 스타일 로드\n  if (!document.getElementById('loop-electron-styles')) {\n    const electronStyleLink = document.createElement('link');\n    electronStyleLink.id = 'loop-electron-styles';\n    electronStyleLink.rel = 'stylesheet';\n    electronStyleLink.href = '/assets/styles/electron-styles.css';\n    document.head.appendChild(electronStyleLink);\n  }\n  \n  console.log('Loop CSS 변수 및 스타일 초기화 완료');\n  \n  // 일정 시간 후 DOM에 스타일이 제대로 적용되었는지 확인\n  setTimeout(() => {\n    const bodyBg = getComputedStyle(document.body).backgroundColor;\n    const isDark = document.documentElement.classList.contains('dark') || \n                   document.documentElement.classList.contains('dark-mode');\n    console.log(`현재 body 배경색: ${bodyBg}, 다크모드: ${isDark}`);\n  }, 1000);\n};\n\nexport default initStyles;\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;AAChC,MAAM,aAAa;IACjB,uDAAuD;IACvD,IAAI,QAAQ,SAAS,cAAc,CAAC;IAEpC,8BAA8B;IAC9B,IAAI,CAAC,OAAO;QACV,QAAQ,SAAS,aAAa,CAAC;QAC/B,MAAM,EAAE,GAAG;QACX,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,MAAM,WAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2CrB,CAAC;IAED,WAAW;IACX,IAAI,CAAC,SAAS,cAAc,CAAC,eAAe;QAC1C,MAAM,WAAW,SAAS,aAAa,CAAC;QACxC,SAAS,EAAE,GAAG;QACd,SAAS,GAAG,GAAG;QACf,SAAS,IAAI,GAAG;QAChB,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,cAAc;IACd,IAAI,CAAC,SAAS,cAAc,CAAC,yBAAyB;QACpD,MAAM,oBAAoB,SAAS,aAAa,CAAC;QACjD,kBAAkB,EAAE,GAAG;QACvB,kBAAkB,GAAG,GAAG;QACxB,kBAAkB,IAAI,GAAG;QACzB,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,QAAQ,GAAG,CAAC;IAEZ,kCAAkC;IAClC,WAAW;QACT,MAAM,SAAS,iBAAiB,SAAS,IAAI,EAAE,eAAe;QAC9D,MAAM,SAAS,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,WAC5C,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC3D,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,OAAO,QAAQ,EAAE,QAAQ;IACvD,GAAG;AACL;uCAEe","debugId":null}},
    {"offset": {"line": 7380, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/notifications/types.ts"],"sourcesContent":["/**\n * 알림 시스템 타입 정의\n * GitHub Copilot 규칙 준수: TypeScript 엄격 타입 정의\n */\n\nexport interface NotificationItem {\n  id: string;\n  type: 'info' | 'warning' | 'success' | 'error';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  category?: 'system' | 'memory' | 'task' | 'report';\n  priority?: 'low' | 'medium' | 'high' | 'urgent';\n  actions?: NotificationAction[];\n}\n\nexport interface NotificationAction {\n  id: string;\n  label: string;\n  action: () => void;\n  variant?: 'primary' | 'secondary' | 'danger';\n}\n\nexport interface NotificationSettings {\n  enabled: boolean;\n  systemNotifications: boolean;\n  memoryWarnings: boolean;\n  taskCompletions: boolean;\n  weeklyReports: boolean;\n  soundEnabled: boolean;\n  position: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n  autoHide: boolean;\n  autoHideDelay: number; // in milliseconds\n}\n\nexport interface NotificationContextType {\n  notifications: NotificationItem[];\n  settings: NotificationSettings;\n  addNotification: (notification: Omit<NotificationItem, 'id' | 'timestamp'>) => void;\n  removeNotification: (id: string) => void;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearAll: () => void;\n  updateSettings: (settings: Partial<NotificationSettings>) => void;\n  unreadCount: number;\n}\n\nexport const DEFAULT_NOTIFICATION_SETTINGS: NotificationSettings = {\n  enabled: true,\n  systemNotifications: true,\n  memoryWarnings: true,\n  taskCompletions: true,\n  weeklyReports: false,\n  soundEnabled: false,\n  position: 'top-right',\n  autoHide: true,\n  autoHideDelay: 5000\n};\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AA6CM,MAAM,gCAAsD;IACjE,SAAS;IACT,qBAAqB;IACrB,gBAAgB;IAChB,iBAAiB;IACjB,eAAe;IACf,cAAc;IACd,UAAU;IACV,UAAU;IACV,eAAe;AACjB","debugId":null}},
    {"offset": {"line": 7406, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/notifications/NotificationProvider.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { \n  NotificationItem, \n  NotificationContextType, \n  NotificationSettings,\n  DEFAULT_NOTIFICATION_SETTINGS \n} from './types';\n\n/**\n * 알림 컨텍스트 생성\n * Pub-Sub 패턴을 활용한 글로벌 알림 관리\n */\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\ninterface NotificationProviderProps {\n  children: React.ReactNode;\n}\n\nexport function NotificationProvider({ children }: NotificationProviderProps) {\n  const [notifications, setNotifications] = useState<NotificationItem[]>([]);\n  const [settings, setSettings] = useState<NotificationSettings>(DEFAULT_NOTIFICATION_SETTINGS);\n\n  // 로컬 스토리지에서 설정 로드\n  useEffect(() => {\n    const savedSettings = localStorage.getItem('notification-settings');\n    if (savedSettings) {\n      try {\n        const parsed = JSON.parse(savedSettings);\n        setSettings({ ...DEFAULT_NOTIFICATION_SETTINGS, ...parsed });\n      } catch (error) {\n        console.error('Failed to parse notification settings:', error);\n      }\n    }\n\n    // 기존 알림 데이터 마이그레이션 (MCP 메모리에서 확장된 샘플 데이터)\n    const sampleNotifications: NotificationItem[] = [\n      {\n        id: '1',\n        type: 'success',\n        title: 'MCP 서버 연결',\n        message: 'TaskManager, Supabase, MongoDB MCP 서버와 성공적으로 연결되었습니다',\n        timestamp: new Date(Date.now() - 5 * 60 * 1000),\n        read: false,\n        category: 'system',\n        priority: 'medium'\n      },\n      {\n        id: '2',\n        type: 'info',\n        title: '메모리 모니터링 활성화',\n        message: '실시간 메모리 모니터링이 시작되었습니다. 현재 사용률: 62%',\n        timestamp: new Date(Date.now() - 10 * 60 * 1000),\n        read: false,\n        category: 'memory',\n        priority: 'low'\n      },\n      {\n        id: '3',\n        type: 'warning',\n        title: 'CPU 사용률 높음',\n        message: 'CPU 사용률이 85%를 초과했습니다. 일부 작업을 중단하는 것을 권장합니다',\n        timestamp: new Date(Date.now() - 15 * 60 * 1000),\n        read: true,\n        category: 'system',\n        priority: 'high'\n      },\n      {\n        id: '4',\n        type: 'success',\n        title: '데이터베이스 동기화',\n        message: 'Supabase 데이터베이스와 동기화가 완료되었습니다. 47개의 레코드가 업데이트되었습니다',\n        timestamp: new Date(Date.now() - 30 * 60 * 1000),\n        read: false,\n        category: 'system',\n        priority: 'medium'\n      },\n      {\n        id: '5',\n        type: 'info',\n        title: '새로운 작업 추가',\n        message: 'TaskManager를 통해 5개의 새로운 작업이 추가되었습니다',\n        timestamp: new Date(Date.now() - 45 * 60 * 1000),\n        read: true,\n        category: 'task',\n        priority: 'low'\n      },\n      {\n        id: '6',\n        type: 'error',\n        title: 'MongoDB 연결 오류',\n        message: 'MongoDB 서버에 연결할 수 없습니다. 네트워크 상태를 확인해주세요',\n        timestamp: new Date(Date.now() - 60 * 60 * 1000),\n        read: false,\n        category: 'system',\n        priority: 'urgent'\n      }\n    ];\n    \n    setNotifications(sampleNotifications);\n  }, []);\n\n  // 설정 변경 시 로컬 스토리지에 저장\n  useEffect(() => {\n    localStorage.setItem('notification-settings', JSON.stringify(settings));\n  }, [settings]);\n\n  // 알림 추가\n  const addNotification = useCallback((notification: Omit<NotificationItem, 'id' | 'timestamp'>) => {\n    if (!settings.enabled) return;\n\n    const newNotification: NotificationItem = {\n      ...notification,\n      id: Date.now().toString(),\n      timestamp: new Date(),\n      read: false\n    };\n\n    setNotifications(prev => [newNotification, ...prev]);\n\n    // 사운드 재생 (설정이 활성화된 경우)\n    if (settings.soundEnabled) {\n      // 브라우저 알림음 재생 (실제 구현에서는 커스텀 사운드 파일 사용 가능)\n      try {\n        new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+LyvmwhBjiS1fPAeSsFJXfM7+KOTAYQW7LO').play();\n      } catch (error) {\n        console.log('Sound notification failed:', error);\n      }\n    }\n\n    // 자동 숨김 설정\n    if (settings.autoHide && notification.type !== 'error') {\n      setTimeout(() => {\n        removeNotification(newNotification.id);\n      }, settings.autoHideDelay);\n    }\n  }, [settings]);\n\n  // 알림 제거\n  const removeNotification = useCallback((id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  }, []);\n\n  // 읽음 처리\n  const markAsRead = useCallback((id: string) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true }\n          : notification\n      )\n    );\n  }, []);\n\n  // 모든 알림 읽음 처리\n  const markAllAsRead = useCallback(() => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, read: true }))\n    );\n  }, []);\n\n  // 모든 알림 삭제\n  const clearAll = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  // 설정 업데이트\n  const updateSettings = useCallback((newSettings: Partial<NotificationSettings>) => {\n    setSettings(prev => ({ ...prev, ...newSettings }));\n  }, []);\n\n  // 읽지 않은 알림 개수\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const value: NotificationContextType = {\n    notifications,\n    settings,\n    addNotification,\n    removeNotification,\n    markAsRead,\n    markAllAsRead,\n    clearAll,\n    updateSettings,\n    unreadCount\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n}\n\n// 커스텀 훅\nexport function useNotifications() {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7649, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/notifications/NotificationDropdown.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { \n  Bell, \n  X, \n  Clock, \n  AlertCircle, \n  CheckCircle, \n  Info,\n  Settings,\n  Trash2,\n  Check\n} from 'lucide-react';\nimport { useNotifications } from './NotificationProvider';\nimport { NotificationItem } from './types';\n\n/**\n * 알림 드롭다운 컴포넌트\n * 웹 표준 패턴을 따라 구현된 접근성 높은 알림 센터\n */\nexport function NotificationDropdown() {\n  const {\n    notifications,\n    unreadCount,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll\n  } = useNotifications();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [filter, setFilter] = useState<'all' | 'unread'>('all');\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  // 외부 클릭 감지\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        dropdownRef.current && \n        !dropdownRef.current.contains(event.target as Node) &&\n        buttonRef.current &&\n        !buttonRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // ESC 키로 닫기\n  useEffect(() => {\n    function handleEscapeKey(event: KeyboardEvent) {\n      if (event.key === 'Escape' && isOpen) {\n        setIsOpen(false);\n        buttonRef.current?.focus();\n      }\n    }\n\n    document.addEventListener('keydown', handleEscapeKey);\n    return () => document.removeEventListener('keydown', handleEscapeKey);\n  }, [isOpen]);\n\n  // 알림 아이콘 렌더링\n  const getNotificationIcon = (type: NotificationItem['type']) => {\n    const iconProps = { className: \"w-4 h-4\" };\n    \n    switch (type) {\n      case 'success':\n        return <CheckCircle {...iconProps} className=\"w-4 h-4 text-green-500\" />;\n      case 'warning':\n        return <AlertCircle {...iconProps} className=\"w-4 h-4 text-yellow-500\" />;\n      case 'error':\n        return <AlertCircle {...iconProps} className=\"w-4 h-4 text-red-500\" />;\n      default:\n        return <Info {...iconProps} className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  // 시간 포맷팅\n  const formatTime = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / 60000);\n    \n    if (minutes < 1) return '방금 전';\n    if (minutes < 60) return `${minutes}분 전`;\n    \n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours}시간 전`;\n    \n    const days = Math.floor(hours / 24);\n    return `${days}일 전`;\n  };\n\n  // 필터링된 알림 목록\n  const filteredNotifications = notifications.filter(notification => {\n    if (filter === 'unread') return !notification.read;\n    return true;\n  });\n\n  // 알림 클릭 핸들러\n  const handleNotificationClick = (notification: NotificationItem) => {\n    if (!notification.read) {\n      markAsRead(notification.id);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* 알림 버튼 */}\n      <button\n        ref={buttonRef}\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"\n          relative p-2 rounded-lg \n          bg-gray-100 dark:bg-gray-700 \n          text-gray-600 dark:text-gray-400\n          hover:bg-gray-200 dark:hover:bg-gray-600 \n          hover:text-gray-900 dark:hover:text-gray-100\n          focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n          transition-all duration-200\n        \"\n        aria-label={`알림 ${unreadCount > 0 ? `(${unreadCount}개의 읽지 않은 알림)` : ''}`}\n        aria-expanded={isOpen}\n        aria-haspopup=\"true\"\n      >\n        <Bell className=\"w-5 h-5\" />\n        \n        {/* 읽지 않은 알림 배지 */}\n        {unreadCount > 0 && (\n          <span className=\"\n            absolute -top-1 -right-1 \n            min-w-[18px] h-[18px] \n            bg-red-500 text-white \n            text-xs font-bold \n            rounded-full \n            flex items-center justify-center\n          \">\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </span>\n        )}\n      </button>\n\n      {/* 드롭다운 메뉴 */}\n      {isOpen && (\n        <div\n          ref={dropdownRef}\n          className=\"\n            absolute right-0 mt-2 \n            w-80 max-h-96 \n            bg-white dark:bg-gray-800 \n            border border-gray-200 dark:border-gray-700 \n            rounded-lg shadow-lg \n            z-50 overflow-hidden\n          \"\n          role=\"menu\"\n          aria-labelledby=\"notification-menu\"\n        >\n          {/* 헤더 */}\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                알림\n              </h3>\n              <button\n                onClick={() => setIsOpen(false)}\n                className=\"\n                  p-1 rounded-md \n                  text-gray-400 hover:text-gray-600 dark:hover:text-gray-200\n                  hover:bg-gray-100 dark:hover:bg-gray-700\n                  focus:outline-none focus:ring-2 focus:ring-blue-500\n                \"\n                aria-label=\"알림 패널 닫기\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </div>\n\n            {/* 필터 및 액션 버튼 */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => setFilter('all')}\n                  className={`\n                    px-3 py-1 text-sm rounded-md transition-colors\n                    ${filter === 'all' \n                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300' \n                      : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\n                    }\n                  `}\n                >\n                  전체 ({notifications.length})\n                </button>\n                <button\n                  onClick={() => setFilter('unread')}\n                  className={`\n                    px-3 py-1 text-sm rounded-md transition-colors\n                    ${filter === 'unread' \n                      ? 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300' \n                      : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'\n                    }\n                  `}\n                >\n                  읽지 않음 ({unreadCount})\n                </button>\n              </div>\n\n              <div className=\"flex items-center space-x-1\">\n                {unreadCount > 0 && (\n                  <button\n                    onClick={markAllAsRead}\n                    className=\"\n                      p-1 rounded-md \n                      text-gray-400 hover:text-blue-600 dark:hover:text-blue-400\n                      hover:bg-gray-100 dark:hover:bg-gray-700\n                      focus:outline-none focus:ring-2 focus:ring-blue-500\n                    \"\n                    title=\"모두 읽음 처리\"\n                  >\n                    <Check className=\"w-4 h-4\" />\n                  </button>\n                )}\n                \n                {notifications.length > 0 && (\n                  <button\n                    onClick={clearAll}\n                    className=\"\n                      p-1 rounded-md \n                      text-gray-400 hover:text-red-600 dark:hover:text-red-400\n                      hover:bg-gray-100 dark:hover:bg-gray-700\n                      focus:outline-none focus:ring-2 focus:ring-red-500\n                    \"\n                    title=\"모든 알림 삭제\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 알림 목록 */}\n          <div className=\"max-h-64 overflow-y-auto\">\n            {filteredNotifications.length === 0 ? (\n              <div className=\"p-8 text-center\">\n                <Bell className=\"w-12 h-12 mx-auto mb-3 text-gray-300 dark:text-gray-600\" />\n                <p className=\"text-gray-500 dark:text-gray-400\">\n                  {filter === 'unread' ? '읽지 않은 알림이 없습니다' : '알림이 없습니다'}\n                </p>\n              </div>\n            ) : (\n              filteredNotifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  onClick={() => handleNotificationClick(notification)}\n                  className={`\n                    p-4 border-b border-gray-100 dark:border-gray-700 last:border-b-0\n                    hover:bg-gray-50 dark:hover:bg-gray-750 cursor-pointer\n                    transition-colors duration-150\n                    ${!notification.read ? 'bg-blue-50 dark:bg-blue-900/20' : ''}\n                  `}\n                  role=\"menuitem\"\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 mt-1\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <h4 className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                          {notification.title}\n                        </h4>\n                        \n                        {!notification.read && (\n                          <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0 ml-2\" />\n                        )}\n                      </div>\n                      \n                      <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2 line-clamp-2\">\n                        {notification.message}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-gray-400 dark:text-gray-500 flex items-center\">\n                          <Clock className=\"w-3 h-3 mr-1\" />\n                          {formatTime(notification.timestamp)}\n                        </span>\n                        \n                        <button\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            removeNotification(notification.id);\n                          }}\n                          className=\"\n                            p-1 rounded-md \n                            text-gray-400 hover:text-red-600 dark:hover:text-red-400\n                            hover:bg-gray-100 dark:hover:bg-gray-700\n                            focus:outline-none focus:ring-2 focus:ring-red-500\n                          \"\n                          title=\"알림 삭제\"\n                        >\n                          <X className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* 푸터 */}\n          {notifications.length > 0 && (\n            <div className=\"p-3 border-t border-gray-200 dark:border-gray-700\">\n              <button\n                onClick={() => {\n                  setIsOpen(false);\n                  // 여기에 설정 페이지로 이동하는 로직 추가\n                }}\n                className=\"\n                  w-full px-3 py-2 text-sm\n                  text-blue-600 dark:text-blue-400\n                  hover:bg-blue-50 dark:hover:bg-blue-900/20\n                  rounded-md transition-colors\n                  flex items-center justify-center\n                \"\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                알림 설정\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8151, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/notifications/NotificationSettingsPanel.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { \n  Bell, \n  Volume2, \n  VolumeX, \n  Monitor, \n  MemoryStick, \n  CheckSquare, \n  FileText,\n  CornerDownRight\n} from 'lucide-react';\nimport { useNotifications } from './NotificationProvider';\nimport { NotificationSettings } from './types';\n\n/**\n * 알림 설정 패널 컴포넌트\n * 사용자가 요청한 모든 알림 설정 옵션 포함\n */\ninterface NotificationSettingsPanelProps {\n  className?: string;\n}\n\nexport function NotificationSettingsPanel({ className = '' }: NotificationSettingsPanelProps) {\n  const { settings, updateSettings } = useNotifications();\n\n  const handleToggle = (key: keyof NotificationSettings, value: boolean) => {\n    updateSettings({ [key]: value });\n  };\n\n  const handleSelectChange = (key: keyof NotificationSettings, value: string | number) => {\n    updateSettings({ [key]: value });\n  };\n\n  // 토글 스위치 컴포넌트\n  const ToggleSwitch = ({ \n    checked, \n    onChange, \n    disabled = false \n  }: { \n    checked: boolean; \n    onChange: (checked: boolean) => void;\n    disabled?: boolean;\n  }) => (\n    <button\n      onClick={() => !disabled && onChange(!checked)}\n      disabled={disabled}\n      className={`\n        relative inline-flex h-6 w-11 items-center rounded-full transition-colors\n        focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n        ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\n        ${checked \n          ? 'bg-blue-600 dark:bg-blue-500' \n          : 'bg-gray-200 dark:bg-gray-700'\n        }\n      `}\n      role=\"switch\"\n      aria-checked={checked}\n    >\n      <span\n        className={`\n          inline-block h-4 w-4 transform rounded-full bg-white transition-transform\n          ${checked ? 'translate-x-6' : 'translate-x-1'}\n        `}\n      />\n    </button>\n  );\n\n  // 설정 섹션 컴포넌트\n  const SettingSection = ({ \n    icon, \n    title, \n    description, \n    children \n  }: {\n    icon: React.ReactNode;\n    title: string;\n    description?: string;\n    children: React.ReactNode;\n  }) => (\n    <div className=\"py-4 border-b border-gray-200 dark:border-gray-700 last:border-b-0\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700\">\n            {icon}\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"text-sm font-medium text-gray-900 dark:text-white\">\n              {title}\n            </h3>\n            {description && (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                {description}\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"ml-4\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={`bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 ${className}`}>\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <Bell className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n            알림 설정\n          </h2>\n        </div>\n\n        <div className=\"space-y-0\">\n          {/* 알림 전체 활성화/비활성화 */}\n          <SettingSection\n            icon={<Bell className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />}\n            title=\"알림 활성화\"\n            description=\"모든 알림을 활성화하거나 비활성화합니다\"\n          >\n            <ToggleSwitch\n              checked={settings.enabled}\n              onChange={(checked) => handleToggle('enabled', checked)}\n            />\n          </SettingSection>\n\n          {/* 시스템 알림 */}\n          <SettingSection\n            icon={<Monitor className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />}\n            title=\"시스템 알림\"\n            description=\"시스템 상태, 연결, 오류 관련 알림\"\n          >\n            <ToggleSwitch\n              checked={settings.systemNotifications}\n              onChange={(checked) => handleToggle('systemNotifications', checked)}\n              disabled={!settings.enabled}\n            />\n          </SettingSection>\n\n          {/* 메모리 경고 */}\n          <SettingSection\n            icon={<MemoryStick className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\" />}\n            title=\"메모리 경고\"\n            description=\"메모리 사용률이 높을 때 경고 알림\"\n          >\n            <ToggleSwitch\n              checked={settings.memoryWarnings}\n              onChange={(checked) => handleToggle('memoryWarnings', checked)}\n              disabled={!settings.enabled}\n            />\n          </SettingSection>\n\n          {/* 작업 완료 알림 */}\n          <SettingSection\n            icon={<CheckSquare className=\"w-5 h-5 text-green-600 dark:text-green-400\" />}\n            title=\"작업 완료 알림\"\n            description=\"TaskManager 작업이 완료되었을 때 알림\"\n          >\n            <ToggleSwitch\n              checked={settings.taskCompletions}\n              onChange={(checked) => handleToggle('taskCompletions', checked)}\n              disabled={!settings.enabled}\n            />\n          </SettingSection>\n\n          {/* 주간 리포트 */}\n          <SettingSection\n            icon={<FileText className=\"w-5 h-5 text-purple-600 dark:text-purple-400\" />}\n            title=\"주간 리포트\"\n            description=\"매주 활동 요약 리포트 알림\"\n          >\n            <ToggleSwitch\n              checked={settings.weeklyReports}\n              onChange={(checked) => handleToggle('weeklyReports', checked)}\n              disabled={!settings.enabled}\n            />\n          </SettingSection>\n\n          {/* 사운드 설정 */}\n          <SettingSection\n            icon={settings.soundEnabled \n              ? <Volume2 className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n              : <VolumeX className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />\n            }\n            title=\"알림 사운드\"\n            description=\"알림 시 사운드 재생\"\n          >\n            <ToggleSwitch\n              checked={settings.soundEnabled}\n              onChange={(checked) => handleToggle('soundEnabled', checked)}\n              disabled={!settings.enabled}\n            />\n          </SettingSection>\n\n          {/* 자동 숨김 설정 */}\n          <SettingSection\n            icon={<CornerDownRight className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />}\n            title=\"자동 숨김\"\n            description=\"일정 시간 후 알림을 자동으로 제거\"\n          >\n            <div className=\"flex items-center space-x-3\">\n              <ToggleSwitch\n                checked={settings.autoHide}\n                onChange={(checked) => handleToggle('autoHide', checked)}\n                disabled={!settings.enabled}\n              />\n              {settings.autoHide && (\n                <select\n                  value={settings.autoHideDelay}\n                  onChange={(e) => handleSelectChange('autoHideDelay', parseInt(e.target.value))}\n                  disabled={!settings.enabled}\n                  className=\"\n                    px-3 py-1 text-sm rounded-md border border-gray-300 dark:border-gray-600\n                    bg-white dark:bg-gray-700 text-gray-900 dark:text-white\n                    focus:outline-none focus:ring-2 focus:ring-blue-500\n                  \"\n                >\n                  <option value={3000}>3초</option>\n                  <option value={5000}>5초</option>\n                  <option value={10000}>10초</option>\n                  <option value={30000}>30초</option>\n                </select>\n              )}\n            </div>\n          </SettingSection>\n\n          {/* 알림 위치 */}\n          <SettingSection\n            icon={<CornerDownRight className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" />}\n            title=\"알림 위치\"\n            description=\"토스트 알림이 나타날 위치 (향후 구현 예정)\"\n          >\n            <select\n              value={settings.position}\n              onChange={(e) => handleSelectChange('position', e.target.value)}\n              disabled={!settings.enabled}\n              className=\"\n                px-3 py-1 text-sm rounded-md border border-gray-300 dark:border-gray-600\n                bg-white dark:bg-gray-700 text-gray-900 dark:text-white\n                focus:outline-none focus:ring-2 focus:ring-blue-500\n              \"\n            >\n              <option value=\"top-right\">우상단</option>\n              <option value=\"top-left\">좌상단</option>\n              <option value=\"bottom-right\">우하단</option>\n              <option value=\"bottom-left\">좌하단</option>\n            </select>\n          </SettingSection>\n        </div>\n\n        {/* 설정 정보 */}\n        <div className=\"mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n            알림 설정은 브라우저 로컬 스토리지에 저장되며, \n            페이지를 새로고침해도 유지됩니다.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8643, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/notifications/index.ts"],"sourcesContent":["// 알림 시스템 컴포넌트들 통합 내보내기\nexport { NotificationProvider, useNotifications } from './NotificationProvider';\nexport { NotificationDropdown } from './NotificationDropdown';\nexport { NotificationSettingsPanel } from './NotificationSettingsPanel';\nexport type { NotificationItem, NotificationAction, NotificationSettings, NotificationContextType } from './types';\nexport { DEFAULT_NOTIFICATION_SETTINGS } from './types';\n"],"names":[],"mappings":"AAAA,uBAAuB;;AACvB;AACA;AACA;AAEA","debugId":null}},
    {"offset": {"line": 8674, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/providers/ThemeProvider.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { useSettings } from '../../../hooks/useSettings';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  actualTheme: 'light' | 'dark'; // 실제 적용된 테마 (system 해석 후)\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\n// 테마 컨텍스트 생성\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\n// 테마 컨텍스트 훅\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport default function ThemeProvider({ children }: ThemeProviderProps) {\n  const { settings, updateSetting } = useSettings();\n  const [mounted, setMounted] = useState(false);\n  const [actualTheme, setActualTheme] = useState<'light' | 'dark'>('light');\n\n  // 시스템 테마 감지\n  const getSystemTheme = (): 'light' | 'dark' => {\n    if (typeof window === 'undefined') return 'light';\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n\n  // 실제 테마 계산\n  const resolveTheme = (theme: Theme): 'light' | 'dark' => {\n    if (theme === 'system') {\n      return getSystemTheme();\n    }\n    return theme;\n  };\n\n  // 테마 적용\n  const applyTheme = (resolvedTheme: 'light' | 'dark') => {\n    console.log('🎨 ThemeProvider: 테마 적용', resolvedTheme);\n    \n    if (typeof document !== 'undefined') {\n      // HTML 요소에 클래스 적용\n      const root = document.documentElement;\n      const body = document.body;\n      \n      if (resolvedTheme === 'dark') {\n        root.classList.add('dark', 'dark-mode');\n        body.classList.add('dark', 'dark-mode');\n        root.setAttribute('data-theme', 'dark');\n        body.setAttribute('data-theme', 'dark');\n      } else {\n        root.classList.remove('dark', 'dark-mode');\n        body.classList.remove('dark', 'dark-mode');\n        root.setAttribute('data-theme', 'light');\n        body.setAttribute('data-theme', 'light');\n      }\n      \n      // 메타 테마 컬러 설정\n      const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]');\n      if (metaThemeColor) {\n        metaThemeColor.setAttribute('content', resolvedTheme === 'dark' ? '#1a1a1a' : '#ffffff');\n      }\n    }\n    \n    setActualTheme(resolvedTheme);\n  };\n\n  // 초기 테마 설정\n  useEffect(() => {\n    console.log('🔄 ThemeProvider: 초기화 시작', { \n      settingsTheme: settings.theme, \n      darkMode: settings.darkMode \n    });\n    \n    // 설정에서 테마 결정 (darkMode 설정이 우선)\n    let initialTheme: Theme;\n    if (settings.darkMode !== undefined) {\n      // darkMode 설정이 있으면 그것을 사용\n      initialTheme = settings.darkMode ? 'dark' : 'light';\n    } else {\n      // theme 설정 사용\n      initialTheme = settings.theme || 'system';\n    }\n    \n    console.log('🎯 ThemeProvider: 결정된 초기 테마', initialTheme);\n    \n    const resolved = resolveTheme(initialTheme);\n    applyTheme(resolved);\n    \n    setMounted(true);\n  }, [settings.theme, settings.darkMode]);\n\n  // 시스템 테마 변경 감지\n  useEffect(() => {\n    if (!mounted || settings.theme !== 'system') return;\n    \n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () => {\n      console.log('🌙 ThemeProvider: 시스템 테마 변경 감지');\n      const resolved = resolveTheme('system');\n      applyTheme(resolved);\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, [mounted, settings.theme]);\n\n  // 설정 변경 시 테마 업데이트\n  useEffect(() => {\n    if (!mounted) return;\n    \n    const currentTheme = settings.darkMode !== undefined \n      ? (settings.darkMode ? 'dark' : 'light')\n      : (settings.theme || 'system');\n    \n    const resolved = resolveTheme(currentTheme);\n    if (resolved !== actualTheme) {\n      console.log('⚡ ThemeProvider: 설정 변경으로 테마 업데이트', currentTheme, '->', resolved);\n      applyTheme(resolved);\n    }\n  }, [settings.theme, settings.darkMode, actualTheme, mounted]);\n\n  // 테마 전환 함수\n  const toggleTheme = () => {\n    console.log('🔄 ThemeProvider: 테마 토글 시작', actualTheme);\n    \n    const newTheme = actualTheme === 'light' ? 'dark' : 'light';\n    \n    // 설정 업데이트 (우선순위: darkMode > theme)\n    if (settings.darkMode !== undefined) {\n      updateSetting('darkMode', newTheme === 'dark');\n    } else {\n      updateSetting('theme', newTheme);\n    }\n    \n    console.log('✅ ThemeProvider: 테마 토글 완료', newTheme);\n  };\n\n  // 테마 설정 함수\n  const setTheme = (theme: Theme) => {\n    console.log('🎨 ThemeProvider: 테마 설정', theme);\n    \n    if (theme === 'system') {\n      updateSetting('theme', 'system');\n      // system 모드에서는 darkMode는 false로 설정\n      updateSetting('darkMode', false);\n    } else {\n      // 명시적 테마 설정\n      updateSetting('darkMode', theme === 'dark');\n      updateSetting('theme', theme);\n    }\n  };\n\n  const currentTheme: Theme = settings.darkMode !== undefined \n    ? (settings.darkMode ? 'dark' : 'light')\n    : (settings.theme || 'system');\n\n  // 하이드레이션 문제 방지\n  if (!mounted) {\n    return (\n      <div suppressHydrationWarning>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <ThemeContext.Provider value={{ \n      theme: currentTheme, \n      actualTheme, \n      toggleTheme, \n      setTheme \n    }}>\n      <div \n        suppressHydrationWarning \n        className={actualTheme}\n        data-theme={actualTheme}\n      >\n        {children}\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8882, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/layout/AppHeader.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { Home, BarChart3, TrendingUp, Settings, RefreshCw, Moon, Sun } from 'lucide-react';\nimport { NotificationDropdown } from '../notifications';\nimport { useTheme } from '../providers/ThemeProvider';\n\n/**\n * 네비게이션 헤더 컴포넌트\n * 요구사항: 간격 넓게, 아웃라인 제거, 다크모드 토글 스타일\n */\n\ninterface NavigationItem {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n}\n\ninterface AppHeaderProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  isRefreshing: boolean;\n  onRefresh: () => void;\n}\n\nexport function AppHeader({ activeTab, onTabChange, isRefreshing, onRefresh }: AppHeaderProps) {\n  const { actualTheme, toggleTheme } = useTheme();\n  \n  const navigationItems: NavigationItem[] = [\n    { id: 'home', label: '홈', icon: <Home className=\"w-4 h-4\" /> },\n    { id: 'stats', label: '통계', icon: <BarChart3 className=\"w-4 h-4\" /> },\n    { id: 'analysis', label: '분석', icon: <TrendingUp className=\"w-4 h-4\" /> },\n    { id: 'settings', label: '설정', icon: <Settings className=\"w-4 h-4\" /> }\n  ];\n\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* 로고 */}\n          <div className=\"flex items-center\">\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">Loop 6</h1>\n          </div>\n\n          {/* 네비게이션 버튼들 - 간격 넓게, outline 제거 */}\n          <nav className=\"flex items-center space-x-8\">\n            {navigationItems.map((item) => (\n              <button\n                key={item.id}\n                onClick={() => onTabChange(item.id)}\n                className={`\n                  flex items-center space-x-2 px-4 py-2 rounded-lg transition-all duration-200\n                  focus:outline-none focus:ring-0 hover:outline-none\n                  ${activeTab === item.id\n                    ? 'bg-gray-900 dark:bg-gray-100 text-white dark:text-gray-900'\n                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-gray-100'\n                  }\n                `}\n              >\n                {item.icon}\n                <span className=\"font-medium\">{item.label}</span>\n              </button>\n            ))}\n          </nav>\n\n          {/* 알림, 다크모드 토글, 새로고침 버튼 */}\n          <div className=\"flex items-center space-x-3\">\n            {/* 다크모드 토글 */}\n            <button\n              onClick={toggleTheme}\n              className=\"\n                p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400\n                hover:bg-gray-200 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-gray-100\n                focus:outline-none focus:ring-0 hover:outline-none\n                transition-all duration-200\n              \"\n              aria-label={actualTheme === 'dark' ? '라이트 모드로 변경' : '다크 모드로 변경'}\n            >\n              {actualTheme === 'dark' ? (\n                <Sun className=\"w-4 h-4\" />\n              ) : (\n                <Moon className=\"w-4 h-4\" />\n              )}\n            </button>\n            \n            <button\n              onClick={onRefresh}\n              disabled={isRefreshing}\n              className=\"\n                p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400\n                hover:bg-gray-200 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-gray-100\n                focus:outline-none focus:ring-0 hover:outline-none\n                transition-all duration-200 disabled:opacity-50\n              \"\n              aria-label=\"데이터 새로고침\"\n            >\n              <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </button>\n            \n            <NotificationDropdown />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n"],"names":[],"mappings":";;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;;;AALA;;;;AAyBO,SAAS,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS,EAAkB;;IAC3F,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,0JAAA,CAAA,WAAQ,AAAD;IAE5C,MAAM,kBAAoC;QACxC;YAAE,IAAI;YAAQ,OAAO;YAAK,oBAAM,6LAAC,sMAAA,CAAA,OAAI;gBAAC,WAAU;;;;;;QAAa;QAC7D;YAAE,IAAI;YAAS,OAAO;YAAM,oBAAM,6LAAC,qNAAA,CAAA,YAAS;gBAAC,WAAU;;;;;;QAAa;QACpE;YAAE,IAAI;YAAY,OAAO;YAAM,oBAAM,6LAAC,qNAAA,CAAA,aAAU;gBAAC,WAAU;;;;;;QAAa;QACxE;YAAE,IAAI;YAAY,OAAO;YAAM,oBAAM,6LAAC,6MAAA,CAAA,WAAQ;gBAAC,WAAU;;;;;;QAAa;KACvE;IAED,qBACE,6LAAC;QAAO,WAAU;kBAChB,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC;gBAAI,WAAU;;kCAEb,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAG,WAAU;sCAAkD;;;;;;;;;;;kCAIlE,6LAAC;wBAAI,WAAU;kCACZ,gBAAgB,GAAG,CAAC,CAAC,qBACpB,6LAAC;gCAEC,SAAS,IAAM,YAAY,KAAK,EAAE;gCAClC,WAAW,CAAC;;;kBAGV,EAAE,cAAc,KAAK,EAAE,GACnB,+DACA,yHACH;gBACH,CAAC;;oCAEA,KAAK,IAAI;kDACV,6LAAC;wCAAK,WAAU;kDAAe,KAAK,KAAK;;;;;;;+BAZpC,KAAK,EAAE;;;;;;;;;;kCAkBlB,6LAAC;wBAAI,WAAU;;0CAEb,6LAAC;gCACC,SAAS;gCACT,WAAU;gCAMV,cAAY,gBAAgB,SAAS,eAAe;0CAEnD,gBAAgB,uBACf,6LAAC,mMAAA,CAAA,MAAG;oCAAC,WAAU;;;;;yDAEf,6LAAC,qMAAA,CAAA,OAAI;oCAAC,WAAU;;;;;;;;;;;0CAIpB,6LAAC;gCACC,SAAS;gCACT,UAAU;gCACV,WAAU;gCAMV,cAAW;0CAEX,cAAA,6LAAC,mNAAA,CAAA,YAAS;oCAAC,WAAW,CAAC,QAAQ,EAAE,eAAe,iBAAiB,IAAI;;;;;;;;;;;0CAGvE,6LAAC,qKAAA,CAAA,uBAAoB;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMjC;GAhFgB;;QACuB,0JAAA,CAAA,WAAQ;;;KAD/B","debugId":null}},
    {"offset": {"line": 9090, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/layout/StatsCards.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\n/**\n * 통계 카드 그리드 컴포넌트\n * 실시간 통계 데이터 표시\n */\n\nexport interface StatCard {\n  title: string;\n  value: string;\n  change: string;\n  trend: 'up' | 'down';\n  icon: React.ReactNode;\n}\n\ninterface StatsCardsProps {\n  cards: StatCard[];\n  className?: string;\n}\n\nexport function StatsCards({ cards, className = '' }: StatsCardsProps) {\n  return (\n    <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 ${className}`}>\n      {cards.map((card, index) => (\n        <div\n          key={index}\n          className=\"\n            bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm \n            border border-gray-200 dark:border-gray-700 \n            hover:shadow-md hover:scale-105 transition-all duration-200\n          \"\n        >\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400\">\n              {card.icon}\n            </div>\n            <span className={`text-sm font-medium ${\n              card.trend === 'up' \n                ? 'text-green-600 dark:text-green-400' \n                : 'text-red-600 dark:text-red-400'\n            }`}>\n              {card.change}\n            </span>\n          </div>\n          <h3 className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-1\">\n            {card.title}\n          </h3>\n          <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            {card.value}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;AAsBO,SAAS,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,EAAmB;IACnE,qBACE,6LAAC;QAAI,WAAW,CAAC,qDAAqD,EAAE,WAAW;kBAChF,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,6LAAC;gBAEC,WAAU;;kCAMV,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;0CACZ,KAAK,IAAI;;;;;;0CAEZ,6LAAC;gCAAK,WAAW,CAAC,oBAAoB,EACpC,KAAK,KAAK,KAAK,OACX,uCACA,kCACJ;0CACC,KAAK,MAAM;;;;;;;;;;;;kCAGhB,6LAAC;wBAAG,WAAU;kCACX,KAAK,KAAK;;;;;;kCAEb,6LAAC;wBAAE,WAAU;kCACV,KAAK,KAAK;;;;;;;eAvBR;;;;;;;;;;AA6Bf;KAlCgB","debugId":null}},
    {"offset": {"line": 9167, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/layout/SectionGrid.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\n/**\n * 섹션 그리드 컴포넌트\n * 다양한 기능별 섹션들을 그리드로 표시\n */\n\nexport interface SectionItem {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  color: string;\n  description: string;\n}\n\ninterface SectionGridProps {\n  sections: SectionItem[];\n  onSectionClick?: (sectionId: string) => void;\n  className?: string;\n}\n\nexport function SectionGrid({ sections, onSectionClick, className = '' }: SectionGridProps) {\n  return (\n    <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 ${className}`}>\n      {sections.map((section) => (\n        <button\n          key={section.id}\n          onClick={() => onSectionClick?.(section.id)}\n          className=\"\n            bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm \n            border border-gray-200 dark:border-gray-700\n            hover:shadow-md hover:scale-105 transition-all duration-200\n            focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\n            text-left group\n          \"\n        >\n          <div className=\"flex items-center space-x-4 mb-4\">\n            <div className={`p-3 rounded-lg ${section.color} text-white group-hover:scale-110 transition-transform duration-200`}>\n              {section.icon}\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n              {section.label}\n            </h3>\n          </div>\n          <p className=\"text-gray-600 dark:text-gray-400 text-sm leading-relaxed\">\n            {section.description}\n          </p>\n        </button>\n      ))}\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;AAuBO,SAAS,YAAY,EAAE,QAAQ,EAAE,cAAc,EAAE,YAAY,EAAE,EAAoB;IACxF,qBACE,6LAAC;QAAI,WAAW,CAAC,qDAAqD,EAAE,WAAW;kBAChF,SAAS,GAAG,CAAC,CAAC,wBACb,6LAAC;gBAEC,SAAS,IAAM,iBAAiB,QAAQ,EAAE;gBAC1C,WAAU;;kCAQV,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAW,CAAC,eAAe,EAAE,QAAQ,KAAK,CAAC,mEAAmE,CAAC;0CACjH,QAAQ,IAAI;;;;;;0CAEf,6LAAC;gCAAG,WAAU;0CACX,QAAQ,KAAK;;;;;;;;;;;;kCAGlB,6LAAC;wBAAE,WAAU;kCACV,QAAQ,WAAW;;;;;;;eAnBjB,QAAQ,EAAE;;;;;;;;;;AAyBzB;KA9BgB","debugId":null}},
    {"offset": {"line": 9237, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/layout/RealTimeMonitor.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\n\n/**\n * 실시간 시스템 모니터 컴포넌트\n * MCP 메모리를 활용한 확장된 실시간 통계\n */\n\nexport interface RealTimeStats {\n  cpuUsage: number;\n  memoryUsage: number;\n  activeConnections: number;\n  dataTransfer: string;\n  networkLatency: number;\n  diskUsage: number;\n  taskCount: number;\n  errorRate: number;\n}\n\ninterface RealTimeMonitorProps {\n  stats: RealTimeStats;\n  className?: string;\n}\n\nexport function RealTimeMonitor({ stats, className = '' }: RealTimeMonitorProps) {\n  // 진행바 색상 결정\n  const getProgressColor = (value: number, type: 'cpu' | 'memory' | 'disk' | 'latency') => {\n    if (type === 'latency') {\n      if (value < 50) return 'bg-green-500';\n      if (value < 100) return 'bg-yellow-500';\n      return 'bg-red-500';\n    }\n    \n    if (value < 50) return 'bg-green-500';\n    if (value < 75) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  // 수치 색상 결정\n  const getValueColor = (value: number, type: 'cpu' | 'memory' | 'disk' | 'latency') => {\n    if (type === 'latency') {\n      if (value < 50) return 'text-green-600 dark:text-green-400';\n      if (value < 100) return 'text-yellow-600 dark:text-yellow-400';\n      return 'text-red-600 dark:text-red-400';\n    }\n    \n    if (value < 50) return 'text-green-600 dark:text-green-400';\n    if (value < 75) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-red-600 dark:text-red-400';\n  };\n\n  // 모니터링 항목 정의\n  const monitoringItems = [\n    {\n      label: 'CPU 사용률',\n      value: stats.cpuUsage,\n      unit: '%',\n      type: 'cpu' as const,\n      showProgress: true\n    },\n    {\n      label: '메모리 사용률',\n      value: stats.memoryUsage,\n      unit: '%',\n      type: 'memory' as const,\n      showProgress: true\n    },\n    {\n      label: '디스크 사용률',\n      value: stats.diskUsage,\n      unit: '%',\n      type: 'disk' as const,\n      showProgress: true\n    },\n    {\n      label: '네트워크 지연시간',\n      value: stats.networkLatency,\n      unit: 'ms',\n      type: 'latency' as const,\n      showProgress: true\n    }\n  ];\n\n  const infoItems = [\n    {\n      label: '활성 연결',\n      value: stats.activeConnections.toString(),\n      description: '개의 활성 연결'\n    },\n    {\n      label: '데이터 전송',\n      value: stats.dataTransfer,\n      description: '실시간 전송률'\n    },\n    {\n      label: '실행 중인 작업',\n      value: stats.taskCount.toString(),\n      description: '개의 활성 작업'\n    },\n    {\n      label: '오류율',\n      value: `${(stats.errorRate * 100).toFixed(2)}%`,\n      description: '시스템 오류율'\n    }\n  ];\n\n  return (\n    <div className={`bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm border border-gray-200 dark:border-gray-700 ${className}`}>\n      <h2 className=\"text-xl font-bold text-gray-900 dark:text-white mb-6\">\n        실시간 시스템 모니터\n      </h2>\n      \n      {/* 진행바가 있는 메트릭들 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n        {monitoringItems.map((item) => (\n          <div key={item.label} className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {item.label}\n              </span>\n              <span className={`text-sm font-bold ${getValueColor(item.value, item.type)}`}>\n                {item.value.toFixed(1)}{item.unit}\n              </span>\n            </div>\n            {item.showProgress && (\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div \n                  className={`h-2 rounded-full transition-all duration-500 ${getProgressColor(item.value, item.type)}`}\n                  style={{ width: `${Math.min(item.value, 100)}%` }}\n                />\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n\n      {/* 정보성 메트릭들 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {infoItems.map((item) => (\n          <div key={item.label} className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                {item.label}\n              </span>\n              <span className=\"text-sm font-bold text-gray-900 dark:text-white\">\n                {item.value}\n              </span>\n            </div>\n            <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n              {item.description}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* 시스템 상태 요약 */}\n      <div className=\"mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n            시스템 상태\n          </span>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-2 h-2 rounded-full ${\n              stats.cpuUsage < 75 && stats.memoryUsage < 80 && stats.errorRate < 0.05\n                ? 'bg-green-500' \n                : stats.cpuUsage < 90 && stats.memoryUsage < 90 && stats.errorRate < 0.1\n                ? 'bg-yellow-500'\n                : 'bg-red-500'\n            }`} />\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {stats.cpuUsage < 75 && stats.memoryUsage < 80 && stats.errorRate < 0.05\n                ? '정상' \n                : stats.cpuUsage < 90 && stats.memoryUsage < 90 && stats.errorRate < 0.1\n                ? '주의'\n                : '경고'\n              }\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9507, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/layout/index.ts"],"sourcesContent":["// 레이아웃 컴포넌트들 통합 내보내기\nexport { AppHeader } from './AppHeader';\nexport { StatsCards } from './StatsCards';\nexport { SectionGrid } from './SectionGrid';\nexport { RealTimeMonitor } from './RealTimeMonitor';\n\n// 타입들도 함께 내보내기\nexport type { StatCard } from './StatsCards';\nexport type { SectionItem } from './SectionGrid';\nexport type { RealTimeStats } from './RealTimeMonitor';\n"],"names":[],"mappings":"AAAA,qBAAqB;;AACrB;AACA;AACA;AACA","debugId":null}},
    {"offset": {"line": 9538, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { TypingBox } from './components/ui/typing-box';\nimport { StatsChart } from './components/ui/stats-chart';\nimport MemoryMonitor from './components/ui/memory-monitor';\nimport { TypingAnalyzer } from './components/ui/typing-analyzer';\nimport NativeModuleStatus from './components/ui/native-module-status';\nimport { Settings } from './components/ui/settings';\nimport ActivityMonitor from './components/ui/activity-monitor';\nimport initStyles from './utils/init-styles';\nimport { AppHeader } from './components/layout';\nimport ClientIcon from './components/ui/client-icon';\n\ninterface Log {\n  id?: string;\n  content: string;\n  keyCount: number;\n  typingTime: number;\n  timestamp: string;\n  totalChars?: number;\n}\n\ntype ActiveTab = 'home' | 'stats' | 'analysis' | 'settings';\n\nexport default function HomePage() {\n  const [activeTab, setActiveTab] = useState<ActiveTab>('home');\n  const [logs, setLogs] = useState<Log[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [imageError, setImageError] = useState(false);\n\n  // 로그 데이터 로드 및 CSS 설정\n  useEffect(() => {\n    loadLogs();\n    \n    // CSS 스타일 강제 적용\n    initStyles();\n  }, []);\n\n  const loadLogs = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/getLogs');\n      const result = await response.json();\n      \n      if (result.success) {\n        setLogs(result.data.logs || []);\n      }\n    } catch (error) {\n      console.error('로그 로드 오류:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTypingComplete = async (record: Omit<Log, 'id'>) => {\n    try {\n      const response = await fetch('/api/logs/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...record,\n          totalChars: record.content.length\n        }),\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        // 로그 목록에 새 기록 추가\n        setLogs(prev => [result.data, ...prev]);\n      }\n    } catch (error) {\n      console.error('로그 저장 오류:', error);\n    }\n  };\n\n  const navItems = [\n    { id: 'home' as ActiveTab, label: '홈' },\n    { id: 'stats' as ActiveTab, label: '통계' },\n    { id: 'analysis' as ActiveTab, label: '분석' },\n    { id: 'settings' as ActiveTab, label: '설정' },\n  ];\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case 'home':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n                Loop\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                실시간 타이핑 분석, GPU 가속, 메모리 최적화를 지원하는 고성능 데스크톱 애플리케이션입니다.\n              </p>\n            </div>\n            \n            <TypingBox onComplete={handleTypingComplete} />\n            \n            {logs.length > 0 && (\n              <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">최근 기록</h2>\n                <div className=\"space-y-2\">\n                  {logs.slice(0, 5).map((log, index) => (\n                    <div key={log.id || index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-md\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-900 dark:text-gray-100 truncate\">\n                          {log.content.substring(0, 50)}...\n                        </p>\n                        <div className=\"flex items-center gap-4 mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                          <span>타자: {log.keyCount}</span>\n                          <span>시간: {log.typingTime}초</span>\n                          <span>타수: {log.typingTime > 0 ? Math.round((log.keyCount / log.typingTime) * 60) : 0}타/분</span>\n                        </div>\n                      </div>\n                      <span className=\"text-xs text-gray-400 dark:text-gray-500\">\n                        {new Date(log.timestamp).toLocaleString()}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'stats':\n        return <StatsChart logs={logs} />;\n\n      case 'analysis':\n        return <TypingAnalyzer />;\n\n      case 'settings':\n        return <Settings />;\n\n      default:\n        return <div>페이지를 찾을 수 없습니다.</div>;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-950\">\n      {/* 새로운 AppHeader 사용 */}\n      <AppHeader \n        activeTab={activeTab}\n        onTabChange={(tab) => setActiveTab(tab as ActiveTab)}\n        isRefreshing={loading}\n        onRefresh={loadLogs}\n      />\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {loading ? (\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n            <span className=\"ml-2 text-gray-600 dark:text-gray-400\">로딩 중...</span>\n          </div>\n        ) : (\n          renderContent()\n        )}\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}