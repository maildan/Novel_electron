{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/api/health/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Static export 설정\nexport const dynamic = 'force-static';\nexport const revalidate = false;\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 요청 분석을 위한 로깅\n    console.log('헬스체크 요청 받음:', {\n      url: request.url,\n      method: request.method,\n      headers: Object.fromEntries(request.headers),\n      timestamp: new Date().toISOString()\n    });\n\n    // 기본 헬스체크 응답\n    const healthCheck = {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV || 'development',\n      port: process.env.NEXT_PORT || 5500,\n      pid: process.pid,\n      memory: process.memoryUsage(),\n      version: process.version,\n      requestInfo: {\n        url: request.url,\n        method: request.method,\n        userAgent: request.headers.get('user-agent') || 'unknown'\n      }\n    };\n\n    return NextResponse.json(healthCheck, { \n      status: 200,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n  } catch (error) {\n    console.error('Health check error:', error);\n    return NextResponse.json(\n      { \n        status: 'error', \n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString()\n      }, \n      { status: 500 }\n    );\n  }\n}\n\nexport async function HEAD(request: NextRequest) {\n  // 요청 분석을 위한 로깅\n  console.log('헬스체크 HEAD 요청 받음:', {\n    url: request.url,\n    method: request.method,\n    timestamp: new Date().toISOString()\n  });\n\n  // HEAD 요청을 위한 간단한 응답\n  return new NextResponse(null, { \n    status: 200,\n    headers: {\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\n      'Pragma': 'no-cache',\n      'Expires': '0'\n    }\n  });\n}\n"],"names":[],"mappings":";;;;;;AAAA;;AAGO,MAAM,UAAU;AAChB,MAAM,aAAa;AAEnB,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,eAAe;QACf,QAAQ,GAAG,CAAC,eAAe;YACzB,KAAK,QAAQ,GAAG;YAChB,QAAQ,QAAQ,MAAM;YACtB,SAAS,OAAO,WAAW,CAAC,QAAQ,OAAO;YAC3C,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,aAAa;QACb,MAAM,cAAc;YAClB,QAAQ;YACR,WAAW,IAAI,OAAO,WAAW;YACjC,QAAQ,QAAQ,MAAM;YACtB,aAAa,mDAAwB;YACrC,MAAM,QAAQ,GAAG,CAAC,SAAS,IAAI;YAC/B,KAAK,QAAQ,GAAG;YAChB,QAAQ,QAAQ,WAAW;YAC3B,SAAS,QAAQ,OAAO;YACxB,aAAa;gBACX,KAAK,QAAQ,GAAG;gBAChB,QAAQ,QAAQ,MAAM;gBACtB,WAAW,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB;YAClD;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;YACpC,QAAQ;YACR,SAAS;gBACP,iBAAiB;gBACjB,UAAU;gBACV,WAAW;YACb;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,QAAQ;YACR,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,WAAW,IAAI,OAAO,WAAW;QACnC,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,eAAe;IACf,QAAQ,GAAG,CAAC,oBAAoB;QAC9B,KAAK,QAAQ,GAAG;QAChB,QAAQ,QAAQ,MAAM;QACtB,WAAW,IAAI,OAAO,WAAW;IACnC;IAEA,qBAAqB;IACrB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,MAAM;QAC5B,QAAQ;QACR,SAAS;YACP,iBAAiB;YACjB,UAAU;YACV,WAAW;QACb;IACF;AACF","debugId":null}}]
}