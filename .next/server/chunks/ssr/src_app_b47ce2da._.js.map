{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/typing-box.tsx"],"sourcesContent":["'use client';\n\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport { Save, BarChart3, Timer, Target, FileText, Type } from 'lucide-react';\n\ninterface TypingBoxProps {\n  onComplete: (record: {\n    content: string;\n    keyCount: number;\n    typingTime: number;\n    timestamp: string;\n  }) => void;\n}\n\nconst IDLE_TIMEOUT = 3000; // 3초\n\nexport function TypingBox({ onComplete }: TypingBoxProps) {\n  const editorRef = useRef<HTMLDivElement>(null);\n  const [typingTime, setTypingTime] = useState<number>(0);\n  const [keyCount, setKeyCount] = useState<number>(0);\n  const [stats, setStats] = useState({\n    pages: 0,\n    words: 0,\n    charCount: 0,\n    charCountNoSpace: 0,\n    accuracy: 100,\n  });\n  \n  const idleTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const typingTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const compositionHandledRef = useRef<boolean>(false);\n  const totalKeystrokesRef = useRef<number>(0);\n\n  // 구글 문서 방식으로 통계 업데이트\n  const updateStats = useCallback(() => {\n    if (!editorRef.current) return;\n    \n    const content = editorRef.current.textContent ?? '';\n    \n    // 구글 문서 방식의 단어 수(공백 기준 어절 분리)\n    const words = content.trim().length > 0\n      ? content.trim().split(/\\s+/).length\n      : 0;\n    \n    // 글자 수(공백 포함) - 모든 글자 1개씩 카운트\n    const charCount = content.length;\n    \n    // 글자 수(공백 제외)\n    const charCountNoSpace = content.replace(/\\s/g, '').length;\n    \n    // 페이지 수 계산(600자 기준)\n    const pages = Math.max(1, Math.ceil(charCount / 600));\n    \n    // 정확도 계산\n    const accuracy = totalKeystrokesRef.current > 0 \n      ? Math.round((keyCount / totalKeystrokesRef.current) * 100)\n      : 100;\n\n    setStats({\n      pages,\n      words,\n      charCount,\n      charCountNoSpace,\n      accuracy,\n    });\n  }, [keyCount]);\n\n  const stopTyping = useCallback(() => {\n    if (typingTimerRef.current) {\n      clearInterval(typingTimerRef.current);\n      typingTimerRef.current = null;\n    }\n  }, []);\n\n  const startTyping = useCallback(() => {\n    if (typingTimerRef.current) clearInterval(typingTimerRef.current);\n    typingTimerRef.current = setInterval(() => {\n      setTypingTime(prev => prev + 1);\n    }, 1000);\n\n    if (idleTimerRef.current) clearTimeout(idleTimerRef.current);\n    idleTimerRef.current = setTimeout(stopTyping, IDLE_TIMEOUT);\n  }, [stopTyping]);\n\n  const handleKeyDown = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    // e.key가 한 글자이거나 스페이스/엔터일 때만 카운트\n    if (e.key.length === 1 || e.key === ' ' || e.key === 'Enter') {\n      // 한글 완성형은 2타, 나머지는 1타로 계산\n      const isKorean = /[가-힣]/.test(e.key);\n      const keystrokeCount = isKorean ? 2 : 1;\n      \n      setKeyCount(prev => prev + keystrokeCount);\n      totalKeystrokesRef.current += keystrokeCount;\n      \n      startTyping();\n      updateStats();\n    }\n  }, [startTyping, updateStats]);\n\n  const handleCompositionEnd = useCallback((e: React.CompositionEvent<HTMLDivElement>) => {\n    compositionHandledRef.current = true;\n    let typeCount = 0;\n    \n    // 한글 완성형은 2타, 자음/모음은 1타, 다른 문자도 1타로 계산\n    for (const char of e.data) {\n      if (/[가-힣]/.test(char)) {\n        typeCount += 2; // 한글 완성형은 2타\n      } else if (/[ㄱ-ㅎ|ㅏ-ㅣ]/.test(char)) {\n        typeCount += 1; // 한글 자음/모음은 1타\n      } else {\n        typeCount += 1; // 그 외 문자는 1타\n      }\n    }\n    \n    setKeyCount(prev => prev + typeCount);\n    totalKeystrokesRef.current += typeCount;\n    \n    startTyping();\n    updateStats();\n  }, [startTyping, updateStats]);\n\n  const handleInput = useCallback((e: React.FormEvent<HTMLDivElement> & { data?: string }) => {\n    if (compositionHandledRef.current) {\n      compositionHandledRef.current = false;\n      return;\n    }\n    \n    if (e.data) {\n      // 각 문자별로 타수 계산\n      let inputTypeCount = 0;\n      for (const char of e.data) {\n        if (/[가-힣]/.test(char)) {\n          inputTypeCount += 2; // 한글 완성형은 2타\n        } else {\n          inputTypeCount += 1; // 그 외 문자는 1타\n        }\n      }\n      \n      setKeyCount(prev => prev + inputTypeCount);\n      totalKeystrokesRef.current += inputTypeCount;\n      \n      startTyping();\n      updateStats();\n    }\n  }, [startTyping, updateStats]);\n\n  const handleSave = async () => {\n    if (!editorRef.current) return;\n    \n    const content = editorRef.current.textContent ?? '';\n    const logData = {\n      content,\n      keyCount,\n      typingTime,\n      timestamp: new Date().toISOString(),\n    };\n    \n    onComplete(logData);\n    \n    // 저장 후 초기화\n    if (editorRef.current) editorRef.current.textContent = '';\n    setKeyCount(0);\n    setTypingTime(0);\n    totalKeystrokesRef.current = 0;\n    updateStats();\n  };\n\n  useEffect(() => {\n    return () => {\n      if (typingTimerRef.current) clearInterval(typingTimerRef.current);\n      if (idleTimerRef.current) clearTimeout(idleTimerRef.current);\n    };\n  }, []);\n\n  return (\n    <div className=\"w-full h-full flex flex-col bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n      {/* Status Bar */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 rounded-t-lg\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4 text-blue-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              글자: {stats.charCount}({stats.charCountNoSpace})\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Type className=\"w-4 h-4 text-green-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              단어: {stats.words}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4 text-purple-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              페이지: {stats.pages}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-4 h-4 text-orange-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              타자: {keyCount}\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Timer className=\"w-4 h-4 text-red-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              시간: {typingTime}초\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <BarChart3 className=\"w-4 h-4 text-indigo-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              타수: {typingTime > 0 ? Math.round((keyCount / typingTime) * 60) : 0}타/분\n            </span>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            <Target className=\"w-4 h-4 text-teal-500\" />\n            <span className=\"text-gray-600 dark:text-gray-300\">\n              정확도: {stats.accuracy}%\n            </span>\n          </div>\n        </div>\n        \n        <button\n          onClick={handleSave}\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-200 shadow-sm\"\n        >\n          <Save className=\"w-4 h-4\" />\n          저장\n        </button>\n      </div>\n      \n      {/* Editor */}        <div\n          ref={editorRef}\n          className=\"flex-1 p-6 outline-none resize-none bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 leading-relaxed text-base overflow-auto\"\n          contentEditable\n          onKeyDown={handleKeyDown}\n          onCompositionEnd={handleCompositionEnd}\n          onInput={handleInput}\n          data-placeholder=\"여기에 타이핑을 시작하세요...\"\n          style={{\n            minHeight: '300px',\n            fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n            lineHeight: '1.6',\n        }}\n      />\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/stats-chart.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useMemo } from 'react';\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, \n  Tooltip, Legend, ResponsiveContainer, LineChart, Line \n} from 'recharts';\nimport { BarChart3, Clock, FileText, Calendar, Activity } from 'lucide-react';\n\ninterface Log {\n  timestamp: string;\n  keyCount: number;\n  typingTime: number;\n  totalChars?: number;\n}\n\ninterface StatsChartProps {\n  logs: Log[];\n}\n\nexport function StatsChart({ logs }: StatsChartProps) {\n  const [chartType, setChartType] = useState<'daily' | 'hourly'>('daily');\n  const [dataType, setDataType] = useState<'keyCount' | 'typingTime' | 'totalChars'>('keyCount');\n  const [visualType, setVisualType] = useState<'bar' | 'line'>('bar');\n\n  const chartData = useMemo(() => {\n    if (!logs || logs.length === 0) return [];\n\n    if (chartType === 'daily') {\n      // 일별 데이터 집계\n      const dailyData: Record<string, { \n        date: string; \n        keyCount: number; \n        typingTime: number; \n        totalChars: number; \n        sessions: number;\n        averageWPM: number;\n      }> = {};\n      \n      logs.forEach(log => {\n        const date = new Date(log.timestamp).toLocaleDateString();\n        if (!dailyData[date]) {\n          dailyData[date] = {\n            date,\n            keyCount: 0,\n            typingTime: 0,\n            totalChars: 0,\n            sessions: 0,\n            averageWPM: 0\n          };\n        }\n        dailyData[date].keyCount += log.keyCount || 0;\n        dailyData[date].typingTime += log.typingTime || 0;\n        dailyData[date].totalChars += log.totalChars || 0;\n        dailyData[date].sessions += 1;\n      });\n      \n      // Calculate average WPM for each day\n      Object.values(dailyData).forEach(day => {\n        day.averageWPM = day.typingTime > 0 ? Math.round((day.keyCount / day.typingTime) * 60) : 0;\n      });\n      \n      return Object.values(dailyData).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n    } else {\n      // 시간별 데이터 집계\n      const hourlyData: Record<string, { \n        hour: string; \n        keyCount: number; \n        typingTime: number; \n        totalChars: number; \n        sessions: number;\n        averageWPM: number;\n      }> = {};\n      \n      logs.forEach(log => {\n        const date = new Date(log.timestamp);\n        const hour = date.getHours();\n        const hourKey = `${hour}시`;\n        if (!hourlyData[hourKey]) {\n          hourlyData[hourKey] = {\n            hour: hourKey,\n            keyCount: 0,\n            typingTime: 0,\n            totalChars: 0,\n            sessions: 0,\n            averageWPM: 0\n          };\n        }\n        hourlyData[hourKey].keyCount += log.keyCount || 0;\n        hourlyData[hourKey].typingTime += log.typingTime || 0;\n        hourlyData[hourKey].totalChars += log.totalChars || 0;\n        hourlyData[hourKey].sessions += 1;\n      });\n      \n      // Calculate average WPM for each hour\n      Object.values(hourlyData).forEach(hour => {\n        hour.averageWPM = hour.typingTime > 0 ? Math.round((hour.keyCount / hour.typingTime) * 60) : 0;\n      });\n      \n      return Object.values(hourlyData).sort((a, b) => parseInt(a.hour) - parseInt(b.hour));\n    }\n  }, [logs, chartType]);\n\n  const getDataTypeLabel = (type: string) => {\n    switch (type) {\n      case 'keyCount': return '타자수';\n      case 'typingTime': return '타이핑 시간(초)';\n      case 'totalChars': return '총 문자수';\n      default: return '타자수';\n    }\n  };\n\n  const getDataTypeColor = (type: string) => {\n    switch (type) {\n      case 'keyCount': return '#3b82f6';\n      case 'typingTime': return '#10b981';\n      case 'totalChars': return '#f59e0b';\n      default: return '#3b82f6';\n    }\n  };\n\n  return (\n    <div className=\"w-full bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <BarChart3 className=\"w-6 h-6 text-blue-500\" />\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">타이핑 통계 차트</h2>\n        </div>\n        \n        {/* Chart Controls */}\n        <div className=\"flex flex-wrap gap-4\">\n          {/* Period Selection */}\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">기간:</span>\n            <div className=\"flex rounded-md overflow-hidden border border-gray-300 dark:border-gray-600\">\n              <button \n                className={`px-3 py-1 text-sm transition-colors ${\n                  chartType === 'daily' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setChartType('daily')}\n              >\n                일별\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  chartType === 'hourly' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setChartType('hourly')}\n              >\n                시간별\n              </button>\n            </div>\n          </div>\n          \n          {/* Chart Type Selection */}\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">차트:</span>\n            <div className=\"flex rounded-md overflow-hidden border border-gray-300 dark:border-gray-600\">\n              <button \n                className={`px-3 py-1 text-sm transition-colors ${\n                  visualType === 'bar' \n                    ? 'bg-green-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setVisualType('bar')}\n              >\n                막대\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  visualType === 'line' \n                    ? 'bg-green-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setVisualType('line')}\n              >\n                선형\n              </button>\n            </div>\n          </div>\n          \n          {/* Data Type Selection */}\n          <div className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4 text-gray-500\" />\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">데이터:</span>\n            <div className=\"flex rounded-md overflow-hidden border border-gray-300 dark:border-gray-600\">\n              <button \n                className={`px-3 py-1 text-sm transition-colors ${\n                  dataType === 'keyCount' \n                    ? 'bg-purple-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setDataType('keyCount')}\n              >\n                타자수\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  dataType === 'typingTime' \n                    ? 'bg-purple-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setDataType('typingTime')}\n              >\n                시간\n              </button>\n              <button \n                className={`px-3 py-1 text-sm transition-colors border-l border-gray-300 dark:border-gray-600 ${\n                  dataType === 'totalChars' \n                    ? 'bg-purple-500 text-white' \n                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'\n                }`}\n                onClick={() => setDataType('totalChars')}\n              >\n                문자수\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Chart */}\n      <div className=\"p-6\">\n        <div className=\"h-96\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            {visualType === 'bar' ? (\n              <BarChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 30 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey={chartType === 'daily' ? 'date' : 'hour'}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={70}\n                  className=\"text-xs fill-gray-600 dark:fill-gray-400\"\n                />\n                <YAxis className=\"text-xs fill-gray-600 dark:fill-gray-400\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Legend />\n                <Bar \n                  dataKey={dataType}\n                  name={getDataTypeLabel(dataType)}\n                  fill={getDataTypeColor(dataType)}\n                  radius={[4, 4, 0, 0]}\n                />\n              </BarChart>\n            ) : (\n              <LineChart\n                data={chartData}\n                margin={{ top: 20, right: 30, left: 20, bottom: 30 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                <XAxis \n                  dataKey={chartType === 'daily' ? 'date' : 'hour'}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={70}\n                  className=\"text-xs fill-gray-600 dark:fill-gray-400\"\n                />\n                <YAxis className=\"text-xs fill-gray-600 dark:fill-gray-400\" />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n                  }}\n                />\n                <Legend />\n                <Line \n                  type=\"monotone\"\n                  dataKey={dataType}\n                  name={getDataTypeLabel(dataType)}\n                  stroke={getDataTypeColor(dataType)}\n                  strokeWidth={2}\n                  dot={{ fill: getDataTypeColor(dataType), strokeWidth: 2, r: 4 }}\n                />\n              </LineChart>\n            )}\n          </ResponsiveContainer>\n        </div>\n      </div>\n      \n      {/* Summary Statistics */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">요약 통계</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <BarChart3 className=\"w-5 h-5 text-blue-500\" />\n              <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">총 타자수</span>\n            </div>\n            <span className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n              {logs.reduce((sum, log) => sum + (log.keyCount || 0), 0).toLocaleString()}\n            </span>\n          </div>\n          \n          <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Clock className=\"w-5 h-5 text-green-500\" />\n              <span className=\"text-sm font-medium text-green-700 dark:text-green-300\">총 시간</span>\n            </div>\n            <span className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n              {formatTime(logs.reduce((sum, log) => sum + (log.typingTime || 0), 0))}\n            </span>\n          </div>\n          \n          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <FileText className=\"w-5 h-5 text-yellow-500\" />\n              <span className=\"text-sm font-medium text-yellow-700 dark:text-yellow-300\">총 문자수</span>\n            </div>\n            <span className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\n              {logs.reduce((sum, log) => sum + (log.totalChars || 0), 0).toLocaleString()}\n            </span>\n          </div>\n          \n          <div className=\"bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Activity className=\"w-5 h-5 text-purple-500\" />\n              <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">기록 수</span>\n            </div>\n            <span className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n              {logs.length.toLocaleString()}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// 시간 형식화 함수\nfunction formatTime(seconds: number): string {\n  if (seconds < 60) return `${seconds}초`;\n  \n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  \n  if (minutes < 60) {\n    return `${minutes}분 ${remainingSeconds}초`;\n  }\n  \n  const hours = Math.floor(minutes / 60);\n  const remainingMinutes = minutes % 60;\n  \n  return `${hours}시간 ${remainingMinutes}분 ${remainingSeconds}초`;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/typing-analyzer.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\n\ninterface TypingData {\n  keyCount: number;\n  typingTime: number;\n  accuracy?: number;\n}\n\ninterface TypingAnalysisResult {\n  wpm: number;\n  accuracy: number;\n  performanceIndex: number;\n  consistencyScore: number;\n  fatigueAnalysis: {\n    score: number;\n    timeFactor: number;\n    intensityFactor: number;\n    recommendation: string;\n  };\n}\n\ninterface TypingAnalyzerProps {\n  stats?: TypingData;\n  isTracking?: boolean;\n  className?: string;\n}\n\n// JavaScript로 타이핑 통계 분석 (폴백)\nfunction analyzeTypingWithJS(data: TypingData): TypingAnalysisResult {\n  const { keyCount, typingTime, accuracy = 100 } = data;\n  \n  // WPM 계산 (1단어 = 5타)\n  const minutes = typingTime / 60000;\n  const wpm = minutes > 0 ? (keyCount / 5) / minutes : 0;\n  \n  // 일관성 점수 (간단한 추정)\n  const consistency = Math.min(100, 65 + (Math.min(keyCount, 500) / 20));\n  \n  // 피로도 계산\n  const fatigue = {\n    score: Math.min(100, (minutes * 10) + (wpm / 10)),\n    timeFactor: minutes,\n    intensityFactor: wpm / 100,\n    recommendation: minutes > 30 \n      ? '휴식이 필요합니다' \n      : minutes > 15 \n        ? '짧은 휴식을 고려하세요' \n        : '좋은 상태입니다'\n  };\n  \n  return {\n    wpm: Math.max(0, wpm),\n    accuracy: Math.min(100, Math.max(0, accuracy)),\n    performanceIndex: Math.max(0, wpm * accuracy / 100),\n    consistencyScore: consistency,\n    fatigueAnalysis: fatigue\n  };\n}\n\nexport function TypingAnalyzer({ stats, isTracking, className }: TypingAnalyzerProps) {\n  const defaultStats = {\n    keyCount: 0,\n    typingTime: 0,\n    accuracy: 100\n  };\n\n  const safeStats = stats || defaultStats;\n  const [result, setResult] = useState<TypingAnalysisResult | null>(null);\n  const [useGpuAcceleration, setUseGpuAcceleration] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [gpuAvailable, setGpuAvailable] = useState<boolean>(false);\n\n  // GPU 상태 확인\n  const checkGpuStatus = useCallback(async () => {\n    try {\n      setGpuAvailable(false); // GPU는 현재 사용 불가로 설정\n    } catch (err) {\n      console.warn('GPU 상태 확인 실패:', err);\n      setGpuAvailable(false);\n    }\n  }, []);\n\n  // GPU로 타이핑 분석 수행\n  const computeWithGpu = useCallback(async (data: TypingData): Promise<TypingAnalysisResult | null> => {\n    try {\n      // GPU 기능은 현재 비활성화\n      return null;\n    } catch (err) {\n      console.error('GPU 계산 실패:', err);\n    }\n    return null;\n  }, []);\n\n  // 타이핑 통계 분석 수행\n  const analyzeTyping = useCallback(async () => {\n    if (!safeStats.keyCount || !safeStats.typingTime) {\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (useGpuAcceleration && gpuAvailable) {\n        // GPU 가속 분석\n        const gpuResult = await computeWithGpu(safeStats);\n        \n        if (gpuResult) {\n          setResult(gpuResult);\n        } else {\n          // GPU 실패 시 JavaScript 폴백\n          const jsResult = analyzeTypingWithJS(safeStats);\n          setResult(jsResult);\n        }\n      } else {\n        // JavaScript로 분석 (폴백)\n        const jsResult = analyzeTypingWithJS(safeStats);\n        setResult(jsResult);\n      }\n    } catch (err) {\n      console.error('타이핑 분석 오류:', err);\n      setError('분석 중 오류가 발생했습니다.');\n      \n      // 오류 시 JavaScript 폴백 사용\n      const jsResult = analyzeTypingWithJS(safeStats);\n      setResult(jsResult);\n    } finally {\n      setLoading(false);\n    }\n  }, [safeStats, useGpuAcceleration, gpuAvailable, computeWithGpu]);\n\n  // GPU 가속 활성화/비활성화 처리\n  const handleToggleGpu = useCallback(async () => {\n    const newState = !useGpuAcceleration;\n    setUseGpuAcceleration(newState);\n    \n    if (newState && gpuAvailable) {\n      try {\n        // GPU 기능은 현재 비활성화\n        setUseGpuAcceleration(false);\n      } catch (err) {\n        console.error('GPU 활성화 실패:', err);\n        setUseGpuAcceleration(false);\n      }\n    }\n  }, [useGpuAcceleration, gpuAvailable]);\n\n  // 컴포넌트 마운트 시 GPU 상태 확인\n  useEffect(() => {\n    checkGpuStatus();\n  }, [checkGpuStatus]);\n\n  // 데이터 변경 시 재분석\n  useEffect(() => {\n    if (safeStats.keyCount > 0 && safeStats.typingTime > 0) {\n      analyzeTyping();\n    }\n  }, [safeStats, analyzeTyping]);\n\n  return (\n    <div className={`bg-white rounded-lg shadow-sm border p-6 ${className || ''}`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">타이핑 분석</h2>\n        {gpuAvailable && (\n          <div className=\"flex items-center space-x-2\">\n            <label className=\"flex items-center space-x-2 text-sm\">\n              <input\n                type=\"checkbox\"\n                checked={useGpuAcceleration}\n                onChange={handleToggleGpu}\n                disabled={loading}\n                className=\"rounded border-gray-300\"\n              />\n              <span>GPU 가속</span>\n            </label>\n          </div>\n        )}\n      </div>\n\n      {loading && (\n        <div className=\"text-center py-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\n          <p className=\"text-sm text-gray-600 mt-2\">분석 중...</p>\n        </div>\n      )}\n      \n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-3 mb-4\">\n          <p className=\"text-red-700 text-sm\">{error}</p>\n        </div>\n      )}\n      \n      {result && !loading && (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-blue-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">속도</div>\n              <div className=\"text-2xl font-bold text-blue-600\">{Math.round(result.wpm)} WPM</div>\n            </div>\n            \n            <div className=\"bg-green-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">정확도</div>\n              <div className=\"text-2xl font-bold text-green-600\">{result.accuracy.toFixed(1)}%</div>\n            </div>\n            \n            <div className=\"bg-purple-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">성능 지수</div>\n              <div className=\"text-2xl font-bold text-purple-600\">{result.performanceIndex.toFixed(1)}</div>\n            </div>\n            \n            <div className=\"bg-orange-50 rounded-lg p-3\">\n              <div className=\"text-sm text-gray-600\">일관성</div>\n              <div className=\"text-2xl font-bold text-orange-600\">{result.consistencyScore.toFixed(1)}</div>\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-50 rounded-lg p-4\">\n            <h3 className=\"font-semibold text-gray-800 mb-2\">피로도 분석</h3>\n            <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n              <div \n                className={`h-2 rounded-full ${\n                  result.fatigueAnalysis.score < 30 ? 'bg-green-500' :\n                  result.fatigueAnalysis.score < 70 ? 'bg-yellow-500' : 'bg-red-500'\n                }`}\n                style={{ width: `${Math.min(100, result.fatigueAnalysis.score)}%` }}\n              />\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              {result.fatigueAnalysis.recommendation}\n            </p>\n          </div>\n        </div>\n      )}\n      \n      {!result && !loading && !error && (\n        <div className=\"text-center py-8 text-gray-500\">\n          <p>타이핑을 시작하면 분석 결과가 표시됩니다.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1546, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1552, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/utils/init-styles.ts"],"sourcesContent":["// Loop 앱 CSS 변수 초기화 및 스타일 강제 적용\nconst initStyles = () => {\n  // CSS 변수가 적용되었는지 확인하되, ThemeProvider가 관리하는 테마는 건드리지 않음\n  let style = document.getElementById('loop-init-styles');\n  \n  // 이미 스타일이 있으면 제거하지 않고 업데이트만 함\n  if (!style) {\n    style = document.createElement('style');\n    style.id = 'loop-init-styles';\n    document.head.appendChild(style);\n  }\n  \n  style.textContent = `\n    /* Loop 앱 기본 CSS 변수 - ThemeProvider보다 낮은 우선순위 */\n    :root {\n      --background-color: #f9f9f9;\n      --text-color: #333;\n      --primary-color: #0070f3;\n      --text-secondary: #666;\n      --border-color: #e0e0e0;\n      --card-bg: #ffffff;\n      --header-bg: #ffffff;\n      --footer-bg: #f0f0f0;\n    }\n    \n    /* 다크모드 변수 정의 - ThemeProvider가 .dark 클래스를 추가하면 적용됨 */\n    .dark, .dark-mode, [data-theme=\"dark\"] {\n      --background-color: #121212 !important;\n      --text-color: #e0e0e0 !important;\n      --text-secondary: #a0a0a0 !important;\n      --border-color: #333 !important;\n      --card-bg: #1e1e1e !important;\n      --header-bg: #1e1e1e !important;\n      --footer-bg: #121212 !important;\n    }\n    \n    /* body에 CSS 변수 적용 - transition 포함 */\n    body {\n      background-color: var(--background-color) !important;\n      color: var(--text-color) !important;\n      transition: background-color 0.3s ease, color 0.3s ease;\n    }\n    \n    /* 카드 및 주요 컴포넌트도 변수 사용 */\n    .bg-white, .bg-card {\n      background-color: var(--card-bg) !important;\n    }\n    \n    .text-gray-900, .text-black {\n      color: var(--text-color) !important;\n    }\n    \n    .text-gray-600, .text-gray-500 {\n      color: var(--text-secondary) !important;\n    }\n  `;\n  \n  // 기본 폰트 로드\n  if (!document.getElementById('loop-fonts')) {\n    const fontLink = document.createElement('link');\n    fontLink.id = 'loop-fonts';\n    fontLink.rel = 'stylesheet';\n    fontLink.href = '/assets/fonts/font.css';\n    document.head.appendChild(fontLink);\n  }\n  \n  // 전자문서 스타일 로드\n  if (!document.getElementById('loop-electron-styles')) {\n    const electronStyleLink = document.createElement('link');\n    electronStyleLink.id = 'loop-electron-styles';\n    electronStyleLink.rel = 'stylesheet';\n    electronStyleLink.href = '/assets/styles/electron-styles.css';\n    document.head.appendChild(electronStyleLink);\n  }\n  \n  console.log('Loop CSS 변수 및 스타일 초기화 완료');\n  \n  // 일정 시간 후 DOM에 스타일이 제대로 적용되었는지 확인\n  setTimeout(() => {\n    const bodyBg = getComputedStyle(document.body).backgroundColor;\n    const isDark = document.documentElement.classList.contains('dark') || \n                   document.documentElement.classList.contains('dark-mode');\n    console.log(`현재 body 배경색: ${bodyBg}, 다크모드: ${isDark}`);\n  }, 1000);\n};\n\nexport default initStyles;\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;AAChC,MAAM,aAAa;IACjB,uDAAuD;IACvD,IAAI,QAAQ,SAAS,cAAc,CAAC;IAEpC,8BAA8B;IAC9B,IAAI,CAAC,OAAO;QACV,QAAQ,SAAS,aAAa,CAAC;QAC/B,MAAM,EAAE,GAAG;QACX,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,MAAM,WAAW,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2CrB,CAAC;IAED,WAAW;IACX,IAAI,CAAC,SAAS,cAAc,CAAC,eAAe;QAC1C,MAAM,WAAW,SAAS,aAAa,CAAC;QACxC,SAAS,EAAE,GAAG;QACd,SAAS,GAAG,GAAG;QACf,SAAS,IAAI,GAAG;QAChB,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,cAAc;IACd,IAAI,CAAC,SAAS,cAAc,CAAC,yBAAyB;QACpD,MAAM,oBAAoB,SAAS,aAAa,CAAC;QACjD,kBAAkB,EAAE,GAAG;QACvB,kBAAkB,GAAG,GAAG;QACxB,kBAAkB,IAAI,GAAG;QACzB,SAAS,IAAI,CAAC,WAAW,CAAC;IAC5B;IAEA,QAAQ,GAAG,CAAC;IAEZ,kCAAkC;IAClC,WAAW;QACT,MAAM,SAAS,iBAAiB,SAAS,IAAI,EAAE,eAAe;QAC9D,MAAM,SAAS,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,WAC5C,SAAS,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC3D,QAAQ,GAAG,CAAC,CAAC,aAAa,EAAE,OAAO,QAAQ,EAAE,QAAQ;IACvD,GAAG;AACL;uCAEe","debugId":null}},
    {"offset": {"line": 1640, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/components/ui/client-icon.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { LucideIcon } from 'lucide-react';\n\ninterface ClientIconProps {\n  icon: LucideIcon;\n  className?: string;\n  size?: number;\n  [key: string]: any;\n}\n\n/**\n * 클라이언트 전용 아이콘 래퍼\n * Hydration mismatch 문제를 해결하기 위해 아이콘을 클라이언트에서만 렌더링\n */\nexport default function ClientIcon({ icon: Icon, className, size, ...props }: ClientIconProps) {\n  const [isClient, setIsClient] = useState(false);\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // 서버 사이드에서는 빈 div로 렌더링\n  if (!isClient) {\n    return <div className={className} style={{ width: size || 24, height: size || 24 }} />;\n  }\n\n  // 클라이언트에서는 실제 아이콘 렌더링\n  return <Icon className={className} size={size} {...props} />;\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAgBe,SAAS,WAAW,EAAE,MAAM,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAwB;IAC3F,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,YAAY;IACd,GAAG,EAAE;IAEL,uBAAuB;IACvB,IAAI,CAAC,UAAU;QACb,qBAAO,8OAAC;YAAI,WAAW;YAAW,OAAO;gBAAE,OAAO,QAAQ;gBAAI,QAAQ,QAAQ;YAAG;;;;;;IACnF;IAEA,sBAAsB;IACtB,qBAAO,8OAAC;QAAK,WAAW;QAAW,MAAM;QAAO,GAAG,KAAK;;;;;;AAC1D","debugId":null}},
    {"offset": {"line": 1684, "column": 0}, "map": {"version":3,"sources":["file:///Users/user/loop/loop_6/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { TypingBox } from './components/ui/typing-box';\nimport { StatsChart } from './components/ui/stats-chart';\nimport MemoryMonitor from './components/ui/memory-monitor';\nimport { TypingAnalyzer } from './components/ui/typing-analyzer';\nimport NativeModuleStatus from './components/ui/native-module-status';\nimport { Settings } from './components/ui/settings';\nimport ActivityMonitor from './components/ui/activity-monitor';\nimport initStyles from './utils/init-styles';\nimport { \n  Home, \n  BarChart3, \n  Settings as SettingsIcon, \n  Activity, \n  Database,\n  Cpu,\n  Monitor,\n  Menu\n} from 'lucide-react';\nimport ClientIcon from './components/ui/client-icon';\n\ninterface Log {\n  id?: string;\n  content: string;\n  keyCount: number;\n  typingTime: number;\n  timestamp: string;\n  totalChars?: number;\n}\n\ntype ActiveTab = 'home' | 'stats' | 'analysis' | 'settings';\n\nexport default function HomePage() {\n  const [activeTab, setActiveTab] = useState<ActiveTab>('home');\n  const [logs, setLogs] = useState<Log[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n\n  // 로그 데이터 로드 및 CSS 설정\n  useEffect(() => {\n    loadLogs();\n    \n    // CSS 스타일 강제 적용\n    initStyles();\n  }, []);\n\n  const loadLogs = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/getLogs');\n      const result = await response.json();\n      \n      if (result.success) {\n        setLogs(result.data.logs || []);\n      }\n    } catch (error) {\n      console.error('로그 로드 오류:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTypingComplete = async (record: Omit<Log, 'id'>) => {\n    try {\n      const response = await fetch('/api/logs/save', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...record,\n          totalChars: record.content.length\n        }),\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        // 로그 목록에 새 기록 추가\n        setLogs(prev => [result.data, ...prev]);\n      }\n    } catch (error) {\n      console.error('로그 저장 오류:', error);\n    }\n  };\n\n  const navItems = [\n    { id: 'home' as ActiveTab, label: '홈', icon: Home },\n    { id: 'stats' as ActiveTab, label: '통계', icon: BarChart3 },\n    { id: 'analysis' as ActiveTab, label: '분석', icon: Activity },\n    { id: 'settings' as ActiveTab, label: '설정', icon: SettingsIcon },\n  ];\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case 'home':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n                Loop 6 - 타이핑 분석 시스템\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\n                실시간 타이핑 분석, GPU 가속, 메모리 최적화를 지원하는 고성능 데스크톱 애플리케이션입니다.\n              </p>\n            </div>\n            \n            <TypingBox onComplete={handleTypingComplete} />\n            \n            {logs.length > 0 && (\n              <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n                <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">최근 기록</h2>\n                <div className=\"space-y-2\">\n                  {logs.slice(0, 5).map((log, index) => (\n                    <div key={log.id || index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-md\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-900 dark:text-gray-100 truncate\">\n                          {log.content.substring(0, 50)}...\n                        </p>\n                        <div className=\"flex items-center gap-4 mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                          <span>타자: {log.keyCount}</span>\n                          <span>시간: {log.typingTime}초</span>\n                          <span>타수: {log.typingTime > 0 ? Math.round((log.keyCount / log.typingTime) * 60) : 0}타/분</span>\n                        </div>\n                      </div>\n                      <span className=\"text-xs text-gray-400 dark:text-gray-500\">\n                        {new Date(log.timestamp).toLocaleString()}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'stats':\n        return <StatsChart logs={logs} />;\n\n      case 'analysis':\n        return <TypingAnalyzer />;\n\n      case 'settings':\n        return <Settings />;\n\n      default:\n        return <div>페이지를 찾을 수 없습니다.</div>;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-100 dark:bg-gray-950\">\n      {/* Header Navigation */}\n      <header className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 shadow-sm\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          {/* Logo/Title */}\n          <div className=\"flex items-center gap-3\">\n            <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">Loop 6</h1>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">타이핑 분석 시스템</span>\n          </div>\n\n          {/* Navigation Tabs */}\n          <nav className=\"flex items-center gap-1\">\n            {navItems.map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setActiveTab(item.id)}\n                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-all duration-200 border ${\n                  activeTab === item.id\n                    ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-700 shadow-sm'\n                    : 'text-gray-600 dark:text-gray-400 border-transparent hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-gray-200 hover:border-gray-200 dark:hover:border-gray-600'\n                }`}\n              >\n                <ClientIcon icon={item.icon} className=\"w-4 h-4\" />\n                <span className=\"text-sm font-medium\">{item.label}</span>\n              </button>\n            ))}\n          </nav>\n\n          {/* Mobile Menu Button */}\n          <button\n            onClick={() => setSidebarOpen(!sidebarOpen)}\n            className=\"md:hidden p-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        {/* Mobile Navigation (hidden by default, can be shown when sidebarOpen is true on mobile) */}\n        {sidebarOpen && (\n          <div className=\"md:hidden border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800\">\n            <nav className=\"p-4\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                {navItems.map((item) => (\n                  <button\n                    key={item.id}\n                    onClick={() => {\n                      setActiveTab(item.id);\n                      setSidebarOpen(false); // Close mobile menu after selection\n                    }}\n                    className={`flex items-center gap-2 px-3 py-2 rounded-md transition-colors border ${\n                      activeTab === item.id\n                        ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 border-blue-200 dark:border-blue-700'\n                        : 'text-gray-700 dark:text-gray-300 border-transparent hover:bg-gray-200 dark:hover:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                    }`}\n                  >\n                    <ClientIcon icon={item.icon} className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">{item.label}</span>\n                  </button>\n                ))}\n              </div>\n            </nav>\n          </div>\n        )}\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full overflow-auto p-6\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n              <span className=\"ml-2 text-gray-600 dark:text-gray-400\">로딩 중...</span>\n            </div>\n          ) : (\n            renderContent()\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}