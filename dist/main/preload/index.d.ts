declare const electronAPI: {
    database: {
        saveTypingSession: (data: any) => Promise<any>;
        getRecentSessions: (limit?: number) => Promise<any>;
        getStatistics: (days?: number) => Promise<any>;
        cleanup: () => Promise<any>;
        healthCheck: () => Promise<any>;
        getKeystrokeData: (params: any) => Promise<any>;
        getSessions: (params: any) => Promise<any>;
        exportData: (params: any) => Promise<any>;
        importData: (params: any) => Promise<any>;
        clearData: (params: any) => Promise<any>;
    };
    system: {
        startMonitoring: () => Promise<any>;
        stopMonitoring: () => Promise<any>;
        getCurrentMetrics: () => Promise<any>;
        getMetricsHistory: (minutes?: number) => Promise<any>;
        getAverageMetrics: (minutes?: number) => Promise<any>;
        getHealth: () => Promise<any>;
        getSystemInfo: () => Promise<any>;
        getMemoryUsage: () => Promise<any>;
        optimizeMemory: () => Promise<any>;
        getInfo: () => Promise<any>;
        getCpuInfo: () => Promise<any>;
        getProcesses: () => Promise<any>;
        getLoopProcesses: () => Promise<any>;
        native: {
            getStatus: () => Promise<any>;
            getMemoryUsage: () => Promise<any>;
            startMemoryMonitoring: () => Promise<any>;
            getMemoryStats: () => Promise<any>;
            optimizeMemory: () => Promise<any>;
            cleanupMemory: () => Promise<any>;
            optimizeMemoryAdvanced: () => Promise<any>;
            resetMemoryMonitoring: () => Promise<any>;
            getGpuInfo: () => Promise<any>;
            getGpuMemoryStats: () => Promise<any>;
            runGpuAcceleration: (data: string) => Promise<any>;
            runGpuBenchmark: () => Promise<any>;
            getSystemInfo: () => Promise<any>;
            isNativeModuleAvailable: () => Promise<any>;
            getNativeModuleInfo: () => Promise<any>;
            getNativeModuleVersion: () => Promise<any>;
            initializeNativeModules: () => Promise<any>;
            cleanupNativeModules: () => Promise<any>;
            getTimestamp: () => Promise<any>;
            addWorkerTask: (taskData: string) => Promise<any>;
            getWorkerTaskStatus: (taskId: string) => Promise<any>;
            getWorkerStats: () => Promise<any>;
            getPendingTaskCount: () => Promise<any>;
            resetWorkerPool: () => Promise<any>;
            executeCpuTask: (taskData: string) => Promise<any>;
            processDataParallel: (data: string) => Promise<any>;
            calculateFileHash: (filePath: string) => Promise<any>;
            calculateDirectorySize: (dirPath: string) => Promise<any>;
            calculateStringSimilarity: (str1: string, str2: string) => Promise<any>;
            validateJson: (jsonStr: string) => Promise<any>;
            encodeBase64: (data: string) => Promise<any>;
            decodeBase64: (encodedData: string) => Promise<any>;
            generateUuid: () => Promise<any>;
            getTimestampString: () => Promise<any>;
            getEnvVar: (name: string) => Promise<any>;
            getProcessId: () => Promise<any>;
            startPerformanceMeasurement: (label: string) => Promise<any>;
            endPerformanceMeasurement: (measurementId: string) => Promise<any>;
            startKeystrokeTracking: () => Promise<any>;
            stopKeystrokeTracking: () => Promise<any>;
            getKeystrokeStats: () => Promise<any>;
            startFileMonitoring: (path: string) => Promise<any>;
            stopFileMonitoring: () => Promise<any>;
            getProcessList: () => Promise<any>;
            getNetworkConnections: () => Promise<any>;
            hashData: (data: string) => Promise<any>;
        };
        gpu: {
            getInfo: () => Promise<any>;
            compute: (data: any) => Promise<any>;
            enable: () => Promise<any>;
            disable: () => Promise<any>;
        };
    };
    memory: {
        cleanup: (force?: boolean) => Promise<any>;
        getUsage: () => Promise<any>;
        getStats: () => Promise<any>;
        getInfo: () => Promise<any>;
        optimize: () => Promise<any>;
    };
    native: {
        getMemoryUsage: () => Promise<any>;
        startMemoryMonitoring: () => Promise<any>;
        getMemoryStats: () => Promise<any>;
        optimizeMemory: () => Promise<any>;
        cleanupMemory: () => Promise<any>;
        optimizeMemoryAdvanced: () => Promise<any>;
        resetMemoryMonitoring: () => Promise<any>;
        getGpuInfo: () => Promise<any>;
        getGpuMemoryStats: () => Promise<any>;
        runGpuAcceleration: (data: string) => Promise<any>;
        runGpuBenchmark: () => Promise<any>;
        getSystemInfo: () => Promise<any>;
        isNativeModuleAvailable: () => Promise<any>;
        getNativeModuleInfo: () => Promise<any>;
        getNativeModuleVersion: () => Promise<any>;
        initializeNativeModules: () => Promise<any>;
        cleanupNativeModules: () => Promise<any>;
        getTimestamp: () => Promise<any>;
        addWorkerTask: (taskData: string) => Promise<any>;
        getWorkerTaskStatus: (taskId: string) => Promise<any>;
        getWorkerStats: () => Promise<any>;
        getPendingTaskCount: () => Promise<any>;
        resetWorkerPool: () => Promise<any>;
        executeCpuTask: (taskData: string) => Promise<any>;
        processDataParallel: (data: string) => Promise<any>;
        calculateFileHash: (filePath: string) => Promise<any>;
        calculateDirectorySize: (dirPath: string) => Promise<any>;
        calculateStringSimilarity: (str1: string, str2: string) => Promise<any>;
        validateJson: (jsonStr: string) => Promise<any>;
        encodeBase64: (data: string) => Promise<any>;
        decodeBase64: (encodedData: string) => Promise<any>;
        generateUuid: () => Promise<any>;
        getTimestampString: () => Promise<any>;
        getEnvVar: (name: string) => Promise<any>;
        getProcessId: () => Promise<any>;
        startPerformanceMeasurement: (label: string) => Promise<any>;
        endPerformanceMeasurement: (measurementId: string) => Promise<any>;
    };
    window: {
        create: (options?: any) => Promise<any>;
        minimize: () => Promise<any>;
        maximize: () => Promise<any>;
        toggleMaximize: () => Promise<any>;
        close: () => Promise<any>;
        toggleDevTools: () => Promise<any>;
    };
    config: {
        get: (key?: string) => Promise<any>;
        set: (key: string, value: any) => Promise<any>;
        getAll: () => Promise<any>;
        reset: () => Promise<any>;
    };
    app: {
        getInfo: () => Promise<any>;
        getVersion: () => Promise<any>;
    };
    on: (channel: string, listener: (...args: any[]) => void) => void;
    off: (channel: string, listener: (...args: any[]) => void) => void;
    once: (channel: string, listener: (...args: any[]) => void) => void;
    invoke: (channel: string, ...args: any[]) => Promise<any>;
    utils: {
        removeAllListeners: (channel: string) => void;
        platform: NodeJS.Platform;
        versions: NodeJS.ProcessVersions;
    };
};
export type ElectronAPI = typeof electronAPI;
export {};
//# sourceMappingURL=index.d.ts.map